// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: hyperOutportBlock.proto

package hyperOutportBlocks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PeerAction type represents the possible events that a node can trigger for the metachain to notarize
type PeerAction int32

const (
	PeerAction_InvalidAction      PeerAction = 0
	PeerAction_PeerRegistration   PeerAction = 1
	PeerAction_PeerUnstaking      PeerAction = 2
	PeerAction_PeerDeregistration PeerAction = 3
	PeerAction_PeerJailed         PeerAction = 4
	PeerAction_PeerUnJailed       PeerAction = 5
	PeerAction_PeerSlashed        PeerAction = 6
	PeerAction_PeerReStake        PeerAction = 7
)

// Enum value maps for PeerAction.
var (
	PeerAction_name = map[int32]string{
		0: "InvalidAction",
		1: "PeerRegistration",
		2: "PeerUnstaking",
		3: "PeerDeregistration",
		4: "PeerJailed",
		5: "PeerUnJailed",
		6: "PeerSlashed",
		7: "PeerReStake",
	}
	PeerAction_value = map[string]int32{
		"InvalidAction":      0,
		"PeerRegistration":   1,
		"PeerUnstaking":      2,
		"PeerDeregistration": 3,
		"PeerJailed":         4,
		"PeerUnJailed":       5,
		"PeerSlashed":        6,
		"PeerReStake":        7,
	}
)

func (x PeerAction) Enum() *PeerAction {
	p := new(PeerAction)
	*p = x
	return p
}

func (x PeerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_hyperOutportBlock_proto_enumTypes[0].Descriptor()
}

func (PeerAction) Type() protoreflect.EnumType {
	return &file_hyperOutportBlock_proto_enumTypes[0]
}

func (x PeerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerAction.Descriptor instead.
func (PeerAction) EnumDescriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{0}
}

type Type int32

const (
	Type_TxBlock                  Type = 0
	Type_StateBlock               Type = 30
	Type_PeerBlock                Type = 60
	Type_SmartContractResultBlock Type = 90
	Type_InvalidBlock             Type = 120
	Type_ReceiptBlock             Type = 150
	Type_RewardsBlock             Type = 255
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:   "TxBlock",
		30:  "StateBlock",
		60:  "PeerBlock",
		90:  "SmartContractResultBlock",
		120: "InvalidBlock",
		150: "ReceiptBlock",
		255: "RewardsBlock",
	}
	Type_value = map[string]int32{
		"TxBlock":                  0,
		"StateBlock":               30,
		"PeerBlock":                60,
		"SmartContractResultBlock": 90,
		"InvalidBlock":             120,
		"ReceiptBlock":             150,
		"RewardsBlock":             255,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_hyperOutportBlock_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_hyperOutportBlock_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{1}
}

type HyperOutportBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaOutportBlock            *MetaOutportBlock             `protobuf:"bytes,1,opt,name=MetaOutportBlock,proto3" json:"MetaOutportBlock,omitempty"`
	NotarizedHeadersOutportData []*NotarizedHeaderOutportData `protobuf:"bytes,2,rep,name=NotarizedHeadersOutportData,proto3" json:"NotarizedHeadersOutportData,omitempty"`
}

func (x *HyperOutportBlock) Reset() {
	*x = HyperOutportBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperOutportBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperOutportBlock) ProtoMessage() {}

func (x *HyperOutportBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperOutportBlock.ProtoReflect.Descriptor instead.
func (*HyperOutportBlock) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{0}
}

func (x *HyperOutportBlock) GetMetaOutportBlock() *MetaOutportBlock {
	if x != nil {
		return x.MetaOutportBlock
	}
	return nil
}

func (x *HyperOutportBlock) GetNotarizedHeadersOutportData() []*NotarizedHeaderOutportData {
	if x != nil {
		return x.NotarizedHeadersOutportData
	}
	return nil
}

type NotarizedHeaderOutportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotarizedHeaderHash string             `protobuf:"bytes,1,opt,name=NotarizedHeaderHash,proto3" json:"NotarizedHeaderHash,omitempty"`
	OutportBlock        *ShardOutportBlock `protobuf:"bytes,2,opt,name=OutportBlock,proto3" json:"OutportBlock,omitempty"`
}

func (x *NotarizedHeaderOutportData) Reset() {
	*x = NotarizedHeaderOutportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotarizedHeaderOutportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotarizedHeaderOutportData) ProtoMessage() {}

func (x *NotarizedHeaderOutportData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotarizedHeaderOutportData.ProtoReflect.Descriptor instead.
func (*NotarizedHeaderOutportData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{1}
}

func (x *NotarizedHeaderOutportData) GetNotarizedHeaderHash() string {
	if x != nil {
		return x.NotarizedHeaderHash
	}
	return ""
}

func (x *NotarizedHeaderOutportData) GetOutportBlock() *ShardOutportBlock {
	if x != nil {
		return x.OutportBlock
	}
	return nil
}

type MetaOutportBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                uint32                     `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	BlockData              *MetaBlockData             `protobuf:"bytes,2,opt,name=BlockData,proto3" json:"BlockData,omitempty"`
	TransactionPool        *TransactionPool           `protobuf:"bytes,3,opt,name=TransactionPool,proto3" json:"TransactionPool,omitempty"`
	HeaderGasConsumption   *HeaderGasConsumption      `protobuf:"bytes,4,opt,name=HeaderGasConsumption,proto3" json:"HeaderGasConsumption,omitempty"`
	AlteredAccounts        map[string]*AlteredAccount `protobuf:"bytes,5,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NotarizedHeadersHashes []string                   `protobuf:"bytes,6,rep,name=NotarizedHeadersHashes,proto3" json:"NotarizedHeadersHashes,omitempty"`
	NumberOfShards         uint32                     `protobuf:"varint,7,opt,name=NumberOfShards,proto3" json:"NumberOfShards,omitempty"`
	SignersIndexes         []uint64                   `protobuf:"varint,8,rep,packed,name=SignersIndexes,proto3" json:"SignersIndexes,omitempty"`
	HighestFinalBlockNonce uint64                     `protobuf:"varint,9,opt,name=HighestFinalBlockNonce,proto3" json:"HighestFinalBlockNonce,omitempty"`
	HighestFinalBlockHash  []byte                     `protobuf:"bytes,10,opt,name=HighestFinalBlockHash,proto3" json:"HighestFinalBlockHash,omitempty"`
}

func (x *MetaOutportBlock) Reset() {
	*x = MetaOutportBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaOutportBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaOutportBlock) ProtoMessage() {}

func (x *MetaOutportBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaOutportBlock.ProtoReflect.Descriptor instead.
func (*MetaOutportBlock) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{2}
}

func (x *MetaOutportBlock) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *MetaOutportBlock) GetBlockData() *MetaBlockData {
	if x != nil {
		return x.BlockData
	}
	return nil
}

func (x *MetaOutportBlock) GetTransactionPool() *TransactionPool {
	if x != nil {
		return x.TransactionPool
	}
	return nil
}

func (x *MetaOutportBlock) GetHeaderGasConsumption() *HeaderGasConsumption {
	if x != nil {
		return x.HeaderGasConsumption
	}
	return nil
}

func (x *MetaOutportBlock) GetAlteredAccounts() map[string]*AlteredAccount {
	if x != nil {
		return x.AlteredAccounts
	}
	return nil
}

func (x *MetaOutportBlock) GetNotarizedHeadersHashes() []string {
	if x != nil {
		return x.NotarizedHeadersHashes
	}
	return nil
}

func (x *MetaOutportBlock) GetNumberOfShards() uint32 {
	if x != nil {
		return x.NumberOfShards
	}
	return 0
}

func (x *MetaOutportBlock) GetSignersIndexes() []uint64 {
	if x != nil {
		return x.SignersIndexes
	}
	return nil
}

func (x *MetaOutportBlock) GetHighestFinalBlockNonce() uint64 {
	if x != nil {
		return x.HighestFinalBlockNonce
	}
	return 0
}

func (x *MetaOutportBlock) GetHighestFinalBlockHash() []byte {
	if x != nil {
		return x.HighestFinalBlockHash
	}
	return nil
}

type ShardOutportBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                uint32                     `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	BlockData              *BlockData                 `protobuf:"bytes,2,opt,name=BlockData,proto3" json:"BlockData,omitempty"`
	TransactionPool        *TransactionPool           `protobuf:"bytes,3,opt,name=TransactionPool,proto3" json:"TransactionPool,omitempty"`
	HeaderGasConsumption   *HeaderGasConsumption      `protobuf:"bytes,4,opt,name=HeaderGasConsumption,proto3" json:"HeaderGasConsumption,omitempty"`
	AlteredAccounts        map[string]*AlteredAccount `protobuf:"bytes,5,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NotarizedHeadersHashes []string                   `protobuf:"bytes,6,rep,name=NotarizedHeadersHashes,proto3" json:"NotarizedHeadersHashes,omitempty"`
	NumberOfShards         uint32                     `protobuf:"varint,7,opt,name=NumberOfShards,proto3" json:"NumberOfShards,omitempty"`
	SignersIndexes         []uint64                   `protobuf:"varint,8,rep,packed,name=SignersIndexes,proto3" json:"SignersIndexes,omitempty"`
	HighestFinalBlockNonce uint64                     `protobuf:"varint,9,opt,name=HighestFinalBlockNonce,proto3" json:"HighestFinalBlockNonce,omitempty"`
	HighestFinalBlockHash  []byte                     `protobuf:"bytes,10,opt,name=HighestFinalBlockHash,proto3" json:"HighestFinalBlockHash,omitempty"`
}

func (x *ShardOutportBlock) Reset() {
	*x = ShardOutportBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardOutportBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardOutportBlock) ProtoMessage() {}

func (x *ShardOutportBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardOutportBlock.ProtoReflect.Descriptor instead.
func (*ShardOutportBlock) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{3}
}

func (x *ShardOutportBlock) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *ShardOutportBlock) GetBlockData() *BlockData {
	if x != nil {
		return x.BlockData
	}
	return nil
}

func (x *ShardOutportBlock) GetTransactionPool() *TransactionPool {
	if x != nil {
		return x.TransactionPool
	}
	return nil
}

func (x *ShardOutportBlock) GetHeaderGasConsumption() *HeaderGasConsumption {
	if x != nil {
		return x.HeaderGasConsumption
	}
	return nil
}

func (x *ShardOutportBlock) GetAlteredAccounts() map[string]*AlteredAccount {
	if x != nil {
		return x.AlteredAccounts
	}
	return nil
}

func (x *ShardOutportBlock) GetNotarizedHeadersHashes() []string {
	if x != nil {
		return x.NotarizedHeadersHashes
	}
	return nil
}

func (x *ShardOutportBlock) GetNumberOfShards() uint32 {
	if x != nil {
		return x.NumberOfShards
	}
	return 0
}

func (x *ShardOutportBlock) GetSignersIndexes() []uint64 {
	if x != nil {
		return x.SignersIndexes
	}
	return nil
}

func (x *ShardOutportBlock) GetHighestFinalBlockNonce() uint64 {
	if x != nil {
		return x.HighestFinalBlockNonce
	}
	return 0
}

func (x *ShardOutportBlock) GetHighestFinalBlockHash() []byte {
	if x != nil {
		return x.HighestFinalBlockHash
	}
	return nil
}

type ShardOutportBlockV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                uint32                     `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	BlockData              *BlockData                 `protobuf:"bytes,2,opt,name=BlockData,proto3" json:"BlockData,omitempty"`
	TransactionPool        *TransactionPoolV2         `protobuf:"bytes,3,opt,name=TransactionPool,proto3" json:"TransactionPool,omitempty"`
	HeaderGasConsumption   *HeaderGasConsumption      `protobuf:"bytes,4,opt,name=HeaderGasConsumption,proto3" json:"HeaderGasConsumption,omitempty"`
	AlteredAccounts        map[string]*AlteredAccount `protobuf:"bytes,5,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NotarizedHeadersHashes []string                   `protobuf:"bytes,6,rep,name=NotarizedHeadersHashes,proto3" json:"NotarizedHeadersHashes,omitempty"`
	NumberOfShards         uint32                     `protobuf:"varint,7,opt,name=NumberOfShards,proto3" json:"NumberOfShards,omitempty"`
	SignersIndexes         []uint64                   `protobuf:"varint,8,rep,packed,name=SignersIndexes,proto3" json:"SignersIndexes,omitempty"`
	HighestFinalBlockNonce uint64                     `protobuf:"varint,9,opt,name=HighestFinalBlockNonce,proto3" json:"HighestFinalBlockNonce,omitempty"`
	HighestFinalBlockHash  []byte                     `protobuf:"bytes,10,opt,name=HighestFinalBlockHash,proto3" json:"HighestFinalBlockHash,omitempty"`
}

func (x *ShardOutportBlockV2) Reset() {
	*x = ShardOutportBlockV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardOutportBlockV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardOutportBlockV2) ProtoMessage() {}

func (x *ShardOutportBlockV2) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardOutportBlockV2.ProtoReflect.Descriptor instead.
func (*ShardOutportBlockV2) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{4}
}

func (x *ShardOutportBlockV2) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *ShardOutportBlockV2) GetBlockData() *BlockData {
	if x != nil {
		return x.BlockData
	}
	return nil
}

func (x *ShardOutportBlockV2) GetTransactionPool() *TransactionPoolV2 {
	if x != nil {
		return x.TransactionPool
	}
	return nil
}

func (x *ShardOutportBlockV2) GetHeaderGasConsumption() *HeaderGasConsumption {
	if x != nil {
		return x.HeaderGasConsumption
	}
	return nil
}

func (x *ShardOutportBlockV2) GetAlteredAccounts() map[string]*AlteredAccount {
	if x != nil {
		return x.AlteredAccounts
	}
	return nil
}

func (x *ShardOutportBlockV2) GetNotarizedHeadersHashes() []string {
	if x != nil {
		return x.NotarizedHeadersHashes
	}
	return nil
}

func (x *ShardOutportBlockV2) GetNumberOfShards() uint32 {
	if x != nil {
		return x.NumberOfShards
	}
	return 0
}

func (x *ShardOutportBlockV2) GetSignersIndexes() []uint64 {
	if x != nil {
		return x.SignersIndexes
	}
	return nil
}

func (x *ShardOutportBlockV2) GetHighestFinalBlockNonce() uint64 {
	if x != nil {
		return x.HighestFinalBlockNonce
	}
	return 0
}

func (x *ShardOutportBlockV2) GetHighestFinalBlockHash() []byte {
	if x != nil {
		return x.HighestFinalBlockHash
	}
	return nil
}

type TransactionPoolV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions                               map[string]*TxInfoV2   `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rewards                                    map[string]*RewardInfo `protobuf:"bytes,3,rep,name=Rewards,proto3" json:"Rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Receipts                                   map[string]*Receipt    `protobuf:"bytes,4,rep,name=Receipts,proto3" json:"Receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidTxs                                 map[string]*TxInfo     `protobuf:"bytes,5,rep,name=InvalidTxs,proto3" json:"InvalidTxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                                       []*LogData             `protobuf:"bytes,6,rep,name=Logs,proto3" json:"Logs,omitempty"`
	ScheduledExecutedSCRSHashesPrevBlock       []string               `protobuf:"bytes,7,rep,name=ScheduledExecutedSCRSHashesPrevBlock,proto3" json:"ScheduledExecutedSCRSHashesPrevBlock,omitempty"`
	ScheduledExecutedInvalidTxsHashesPrevBlock []string               `protobuf:"bytes,8,rep,name=ScheduledExecutedInvalidTxsHashesPrevBlock,proto3" json:"ScheduledExecutedInvalidTxsHashesPrevBlock,omitempty"`
}

func (x *TransactionPoolV2) Reset() {
	*x = TransactionPoolV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPoolV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPoolV2) ProtoMessage() {}

func (x *TransactionPoolV2) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPoolV2.ProtoReflect.Descriptor instead.
func (*TransactionPoolV2) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionPoolV2) GetTransactions() map[string]*TxInfoV2 {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionPoolV2) GetRewards() map[string]*RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *TransactionPoolV2) GetReceipts() map[string]*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *TransactionPoolV2) GetInvalidTxs() map[string]*TxInfo {
	if x != nil {
		return x.InvalidTxs
	}
	return nil
}

func (x *TransactionPoolV2) GetLogs() []*LogData {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TransactionPoolV2) GetScheduledExecutedSCRSHashesPrevBlock() []string {
	if x != nil {
		return x.ScheduledExecutedSCRSHashesPrevBlock
	}
	return nil
}

func (x *TransactionPoolV2) GetScheduledExecutedInvalidTxsHashesPrevBlock() []string {
	if x != nil {
		return x.ScheduledExecutedInvalidTxsHashesPrevBlock
	}
	return nil
}

// Header holds the metadata of a block. This is the part that is being hashed and run through consensus.
// The header holds the hash of the body and also the link to the previous block header hash
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce              uint64             `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	PrevHash           []byte             `protobuf:"bytes,2,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	PrevRandSeed       []byte             `protobuf:"bytes,3,opt,name=PrevRandSeed,proto3" json:"PrevRandSeed,omitempty"`
	RandSeed           []byte             `protobuf:"bytes,4,opt,name=RandSeed,proto3" json:"RandSeed,omitempty"`
	PubKeysBitmap      []byte             `protobuf:"bytes,5,opt,name=PubKeysBitmap,proto3" json:"PubKeysBitmap,omitempty"`
	ShardID            uint32             `protobuf:"varint,6,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	TimeStamp          uint64             `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Round              uint64             `protobuf:"varint,8,opt,name=Round,proto3" json:"Round,omitempty"`
	Epoch              uint32             `protobuf:"varint,9,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	BlockBodyType      Type               `protobuf:"varint,10,opt,name=BlockBodyType,proto3,enum=proto.Type" json:"BlockBodyType,omitempty"`
	Signature          []byte             `protobuf:"bytes,11,opt,name=Signature,proto3" json:"Signature,omitempty"`
	LeaderSignature    []byte             `protobuf:"bytes,12,opt,name=LeaderSignature,proto3" json:"LeaderSignature,omitempty"`
	MiniBlockHeaders   []*MiniBlockHeader `protobuf:"bytes,13,rep,name=MiniBlockHeaders,proto3" json:"MiniBlockHeaders,omitempty"`
	PeerChanges        []*PeerChange      `protobuf:"bytes,14,rep,name=PeerChanges,proto3" json:"PeerChanges,omitempty"`
	RootHash           []byte             `protobuf:"bytes,15,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	MetaBlockHashes    [][]byte           `protobuf:"bytes,16,rep,name=MetaBlockHashes,proto3" json:"MetaBlockHashes,omitempty"`
	TxCount            uint32             `protobuf:"varint,17,opt,name=TxCount,proto3" json:"TxCount,omitempty"`
	EpochStartMetaHash []byte             `protobuf:"bytes,18,opt,name=EpochStartMetaHash,proto3" json:"EpochStartMetaHash,omitempty"`
	ReceiptsHash       []byte             `protobuf:"bytes,19,opt,name=ReceiptsHash,proto3" json:"ReceiptsHash,omitempty"`
	ChainID            []byte             `protobuf:"bytes,20,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	SoftwareVersion    []byte             `protobuf:"bytes,21,opt,name=SoftwareVersion,proto3" json:"SoftwareVersion,omitempty"`
	AccumulatedFees    []byte             `protobuf:"bytes,22,opt,name=AccumulatedFees,proto3" json:"AccumulatedFees,omitempty"`
	DeveloperFees      []byte             `protobuf:"bytes,23,opt,name=DeveloperFees,proto3" json:"DeveloperFees,omitempty"`
	Reserved           []byte             `protobuf:"bytes,24,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{6}
}

func (x *Header) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Header) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *Header) GetPrevRandSeed() []byte {
	if x != nil {
		return x.PrevRandSeed
	}
	return nil
}

func (x *Header) GetRandSeed() []byte {
	if x != nil {
		return x.RandSeed
	}
	return nil
}

func (x *Header) GetPubKeysBitmap() []byte {
	if x != nil {
		return x.PubKeysBitmap
	}
	return nil
}

func (x *Header) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *Header) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *Header) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Header) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Header) GetBlockBodyType() Type {
	if x != nil {
		return x.BlockBodyType
	}
	return Type_TxBlock
}

func (x *Header) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Header) GetLeaderSignature() []byte {
	if x != nil {
		return x.LeaderSignature
	}
	return nil
}

func (x *Header) GetMiniBlockHeaders() []*MiniBlockHeader {
	if x != nil {
		return x.MiniBlockHeaders
	}
	return nil
}

func (x *Header) GetPeerChanges() []*PeerChange {
	if x != nil {
		return x.PeerChanges
	}
	return nil
}

func (x *Header) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Header) GetMetaBlockHashes() [][]byte {
	if x != nil {
		return x.MetaBlockHashes
	}
	return nil
}

func (x *Header) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Header) GetEpochStartMetaHash() []byte {
	if x != nil {
		return x.EpochStartMetaHash
	}
	return nil
}

func (x *Header) GetReceiptsHash() []byte {
	if x != nil {
		return x.ReceiptsHash
	}
	return nil
}

func (x *Header) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Header) GetSoftwareVersion() []byte {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

func (x *Header) GetAccumulatedFees() []byte {
	if x != nil {
		return x.AccumulatedFees
	}
	return nil
}

func (x *Header) GetDeveloperFees() []byte {
	if x != nil {
		return x.DeveloperFees
	}
	return nil
}

func (x *Header) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type MetaHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce                  uint64             `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Epoch                  uint32             `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Round                  uint64             `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	TimeStamp              uint64             `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	ShardInfo              []*ShardData       `protobuf:"bytes,5,rep,name=ShardInfo,proto3" json:"ShardInfo,omitempty"`
	PeerInfo               []*PeerData        `protobuf:"bytes,6,rep,name=PeerInfo,proto3" json:"PeerInfo,omitempty"`
	Signature              []byte             `protobuf:"bytes,7,opt,name=Signature,proto3" json:"Signature,omitempty"`
	LeaderSignature        []byte             `protobuf:"bytes,8,opt,name=LeaderSignature,proto3" json:"LeaderSignature,omitempty"`
	PubKeysBitmap          []byte             `protobuf:"bytes,9,opt,name=PubKeysBitmap,proto3" json:"PubKeysBitmap,omitempty"`
	PrevHash               []byte             `protobuf:"bytes,10,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	PrevRandSeed           []byte             `protobuf:"bytes,11,opt,name=PrevRandSeed,proto3" json:"PrevRandSeed,omitempty"`
	RandSeed               []byte             `protobuf:"bytes,12,opt,name=RandSeed,proto3" json:"RandSeed,omitempty"`
	RootHash               []byte             `protobuf:"bytes,13,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	ValidatorStatsRootHash []byte             `protobuf:"bytes,14,opt,name=ValidatorStatsRootHash,proto3" json:"ValidatorStatsRootHash,omitempty"`
	MiniBlockHeaders       []*MiniBlockHeader `protobuf:"bytes,16,rep,name=MiniBlockHeaders,proto3" json:"MiniBlockHeaders,omitempty"`
	ReceiptsHash           []byte             `protobuf:"bytes,17,opt,name=ReceiptsHash,proto3" json:"ReceiptsHash,omitempty"`
	EpochStart             *EpochStart        `protobuf:"bytes,18,opt,name=EpochStart,proto3" json:"EpochStart,omitempty"`
	ChainID                []byte             `protobuf:"bytes,19,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	SoftwareVersion        []byte             `protobuf:"bytes,20,opt,name=SoftwareVersion,proto3" json:"SoftwareVersion,omitempty"`
	AccumulatedFees        []byte             `protobuf:"bytes,21,opt,name=AccumulatedFees,proto3" json:"AccumulatedFees,omitempty"`
	AccumulatedFeesInEpoch []byte             `protobuf:"bytes,22,opt,name=AccumulatedFeesInEpoch,proto3" json:"AccumulatedFeesInEpoch,omitempty"`
	DeveloperFees          []byte             `protobuf:"bytes,23,opt,name=DeveloperFees,proto3" json:"DeveloperFees,omitempty"`
	DevFeesInEpoch         []byte             `protobuf:"bytes,24,opt,name=DevFeesInEpoch,proto3" json:"DevFeesInEpoch,omitempty"`
	TxCount                uint32             `protobuf:"varint,25,opt,name=TxCount,proto3" json:"TxCount,omitempty"`
	Reserved               []byte             `protobuf:"bytes,26,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
}

func (x *MetaHeader) Reset() {
	*x = MetaHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaHeader) ProtoMessage() {}

func (x *MetaHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaHeader.ProtoReflect.Descriptor instead.
func (*MetaHeader) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{7}
}

func (x *MetaHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *MetaHeader) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MetaHeader) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MetaHeader) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MetaHeader) GetShardInfo() []*ShardData {
	if x != nil {
		return x.ShardInfo
	}
	return nil
}

func (x *MetaHeader) GetPeerInfo() []*PeerData {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

func (x *MetaHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *MetaHeader) GetLeaderSignature() []byte {
	if x != nil {
		return x.LeaderSignature
	}
	return nil
}

func (x *MetaHeader) GetPubKeysBitmap() []byte {
	if x != nil {
		return x.PubKeysBitmap
	}
	return nil
}

func (x *MetaHeader) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *MetaHeader) GetPrevRandSeed() []byte {
	if x != nil {
		return x.PrevRandSeed
	}
	return nil
}

func (x *MetaHeader) GetRandSeed() []byte {
	if x != nil {
		return x.RandSeed
	}
	return nil
}

func (x *MetaHeader) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MetaHeader) GetValidatorStatsRootHash() []byte {
	if x != nil {
		return x.ValidatorStatsRootHash
	}
	return nil
}

func (x *MetaHeader) GetMiniBlockHeaders() []*MiniBlockHeader {
	if x != nil {
		return x.MiniBlockHeaders
	}
	return nil
}

func (x *MetaHeader) GetReceiptsHash() []byte {
	if x != nil {
		return x.ReceiptsHash
	}
	return nil
}

func (x *MetaHeader) GetEpochStart() *EpochStart {
	if x != nil {
		return x.EpochStart
	}
	return nil
}

func (x *MetaHeader) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *MetaHeader) GetSoftwareVersion() []byte {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

func (x *MetaHeader) GetAccumulatedFees() []byte {
	if x != nil {
		return x.AccumulatedFees
	}
	return nil
}

func (x *MetaHeader) GetAccumulatedFeesInEpoch() []byte {
	if x != nil {
		return x.AccumulatedFeesInEpoch
	}
	return nil
}

func (x *MetaHeader) GetDeveloperFees() []byte {
	if x != nil {
		return x.DeveloperFees
	}
	return nil
}

func (x *MetaHeader) GetDevFeesInEpoch() []byte {
	if x != nil {
		return x.DevFeesInEpoch
	}
	return nil
}

func (x *MetaHeader) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *MetaHeader) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type MiniBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	SenderShardID   uint32 `protobuf:"varint,2,opt,name=SenderShardID,proto3" json:"SenderShardID,omitempty"`
	ReceiverShardID uint32 `protobuf:"varint,3,opt,name=ReceiverShardID,proto3" json:"ReceiverShardID,omitempty"`
	TxCount         uint32 `protobuf:"varint,4,opt,name=TxCount,proto3" json:"TxCount,omitempty"`
	Type            Type   `protobuf:"varint,5,opt,name=Type,proto3,enum=proto.Type" json:"Type,omitempty"`
	Reserved        []byte `protobuf:"bytes,6,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
}

func (x *MiniBlockHeader) Reset() {
	*x = MiniBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniBlockHeader) ProtoMessage() {}

func (x *MiniBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniBlockHeader.ProtoReflect.Descriptor instead.
func (*MiniBlockHeader) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{8}
}

func (x *MiniBlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MiniBlockHeader) GetSenderShardID() uint32 {
	if x != nil {
		return x.SenderShardID
	}
	return 0
}

func (x *MiniBlockHeader) GetReceiverShardID() uint32 {
	if x != nil {
		return x.ReceiverShardID
	}
	return 0
}

func (x *MiniBlockHeader) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *MiniBlockHeader) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TxBlock
}

func (x *MiniBlockHeader) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

// PeerChange holds a change in one peer to shard assignation
type PeerChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey      []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	ShardIdDest uint32 `protobuf:"varint,2,opt,name=ShardIdDest,proto3" json:"ShardIdDest,omitempty"`
}

func (x *PeerChange) Reset() {
	*x = PeerChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerChange) ProtoMessage() {}

func (x *PeerChange) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerChange.ProtoReflect.Descriptor instead.
func (*PeerChange) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{9}
}

func (x *PeerChange) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *PeerChange) GetShardIdDest() uint32 {
	if x != nil {
		return x.ShardIdDest
	}
	return 0
}

type BlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                  uint32       `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Header                   *Header      `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	HeaderType               string       `protobuf:"bytes,3,opt,name=HeaderType,proto3" json:"HeaderType,omitempty"`
	HeaderHash               []byte       `protobuf:"bytes,4,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	Body                     *Body        `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	IntraShardMiniBlocks     []*MiniBlock `protobuf:"bytes,6,rep,name=IntraShardMiniBlocks,proto3" json:"IntraShardMiniBlocks,omitempty"`
	ScheduledRootHash        []byte       `protobuf:"bytes,7,opt,name=ScheduledRootHash,proto3" json:"ScheduledRootHash,omitempty"`
	ScheduledAccumulatedFees []byte       `protobuf:"bytes,8,opt,name=ScheduledAccumulatedFees,proto3" json:"ScheduledAccumulatedFees,omitempty"`
	ScheduledDeveloperFees   []byte       `protobuf:"bytes,9,opt,name=ScheduledDeveloperFees,proto3" json:"ScheduledDeveloperFees,omitempty"`
	ScheduledGasProvided     uint64       `protobuf:"varint,10,opt,name=ScheduledGasProvided,proto3" json:"ScheduledGasProvided,omitempty"`
	ScheduledGasPenalized    uint64       `protobuf:"varint,11,opt,name=ScheduledGasPenalized,proto3" json:"ScheduledGasPenalized,omitempty"`
	ScheduledGasRefunded     uint64       `protobuf:"varint,12,opt,name=ScheduledGasRefunded,proto3" json:"ScheduledGasRefunded,omitempty"`
}

func (x *BlockData) Reset() {
	*x = BlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData) ProtoMessage() {}

func (x *BlockData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData.ProtoReflect.Descriptor instead.
func (*BlockData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{10}
}

func (x *BlockData) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *BlockData) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockData) GetHeaderType() string {
	if x != nil {
		return x.HeaderType
	}
	return ""
}

func (x *BlockData) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *BlockData) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *BlockData) GetIntraShardMiniBlocks() []*MiniBlock {
	if x != nil {
		return x.IntraShardMiniBlocks
	}
	return nil
}

func (x *BlockData) GetScheduledRootHash() []byte {
	if x != nil {
		return x.ScheduledRootHash
	}
	return nil
}

func (x *BlockData) GetScheduledAccumulatedFees() []byte {
	if x != nil {
		return x.ScheduledAccumulatedFees
	}
	return nil
}

func (x *BlockData) GetScheduledDeveloperFees() []byte {
	if x != nil {
		return x.ScheduledDeveloperFees
	}
	return nil
}

func (x *BlockData) GetScheduledGasProvided() uint64 {
	if x != nil {
		return x.ScheduledGasProvided
	}
	return 0
}

func (x *BlockData) GetScheduledGasPenalized() uint64 {
	if x != nil {
		return x.ScheduledGasPenalized
	}
	return 0
}

func (x *BlockData) GetScheduledGasRefunded() uint64 {
	if x != nil {
		return x.ScheduledGasRefunded
	}
	return 0
}

type MetaBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                  uint32       `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Header                   *MetaHeader  `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	HeaderType               string       `protobuf:"bytes,3,opt,name=HeaderType,proto3" json:"HeaderType,omitempty"`
	HeaderHash               []byte       `protobuf:"bytes,4,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	Body                     *Body        `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	IntraShardMiniBlocks     []*MiniBlock `protobuf:"bytes,6,rep,name=IntraShardMiniBlocks,proto3" json:"IntraShardMiniBlocks,omitempty"`
	ScheduledRootHash        []byte       `protobuf:"bytes,7,opt,name=ScheduledRootHash,proto3" json:"ScheduledRootHash,omitempty"`
	ScheduledAccumulatedFees []byte       `protobuf:"bytes,8,opt,name=ScheduledAccumulatedFees,proto3" json:"ScheduledAccumulatedFees,omitempty"`
	ScheduledDeveloperFees   []byte       `protobuf:"bytes,9,opt,name=ScheduledDeveloperFees,proto3" json:"ScheduledDeveloperFees,omitempty"`
	ScheduledGasProvided     uint64       `protobuf:"varint,10,opt,name=ScheduledGasProvided,proto3" json:"ScheduledGasProvided,omitempty"`
	ScheduledGasPenalized    uint64       `protobuf:"varint,11,opt,name=ScheduledGasPenalized,proto3" json:"ScheduledGasPenalized,omitempty"`
	ScheduledGasRefunded     uint64       `protobuf:"varint,12,opt,name=ScheduledGasRefunded,proto3" json:"ScheduledGasRefunded,omitempty"`
}

func (x *MetaBlockData) Reset() {
	*x = MetaBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaBlockData) ProtoMessage() {}

func (x *MetaBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaBlockData.ProtoReflect.Descriptor instead.
func (*MetaBlockData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{11}
}

func (x *MetaBlockData) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *MetaBlockData) GetHeader() *MetaHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MetaBlockData) GetHeaderType() string {
	if x != nil {
		return x.HeaderType
	}
	return ""
}

func (x *MetaBlockData) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *MetaBlockData) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *MetaBlockData) GetIntraShardMiniBlocks() []*MiniBlock {
	if x != nil {
		return x.IntraShardMiniBlocks
	}
	return nil
}

func (x *MetaBlockData) GetScheduledRootHash() []byte {
	if x != nil {
		return x.ScheduledRootHash
	}
	return nil
}

func (x *MetaBlockData) GetScheduledAccumulatedFees() []byte {
	if x != nil {
		return x.ScheduledAccumulatedFees
	}
	return nil
}

func (x *MetaBlockData) GetScheduledDeveloperFees() []byte {
	if x != nil {
		return x.ScheduledDeveloperFees
	}
	return nil
}

func (x *MetaBlockData) GetScheduledGasProvided() uint64 {
	if x != nil {
		return x.ScheduledGasProvided
	}
	return 0
}

func (x *MetaBlockData) GetScheduledGasPenalized() uint64 {
	if x != nil {
		return x.ScheduledGasPenalized
	}
	return 0
}

func (x *MetaBlockData) GetScheduledGasRefunded() uint64 {
	if x != nil {
		return x.ScheduledGasRefunded
	}
	return 0
}

type ShardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID               uint32             `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	HeaderHash            []byte             `protobuf:"bytes,2,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	ShardMiniBlockHeaders []*MiniBlockHeader `protobuf:"bytes,3,rep,name=ShardMiniBlockHeaders,proto3" json:"ShardMiniBlockHeaders,omitempty"`
	PrevRandSeed          []byte             `protobuf:"bytes,4,opt,name=PrevRandSeed,proto3" json:"PrevRandSeed,omitempty"`
	PubKeysBitmap         []byte             `protobuf:"bytes,5,opt,name=PubKeysBitmap,proto3" json:"PubKeysBitmap,omitempty"`
	Signature             []byte             `protobuf:"bytes,6,opt,name=Signature,proto3" json:"Signature,omitempty"`
	TxCount               uint32             `protobuf:"varint,7,opt,name=TxCount,proto3" json:"TxCount,omitempty"`
	Round                 uint64             `protobuf:"varint,8,opt,name=Round,proto3" json:"Round,omitempty"`
	PrevHash              []byte             `protobuf:"bytes,9,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	Nonce                 uint64             `protobuf:"varint,10,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	NumPendingMiniBlocks  uint32             `protobuf:"varint,11,opt,name=NumPendingMiniBlocks,proto3" json:"NumPendingMiniBlocks,omitempty"`
	AccumulatedFees       []byte             `protobuf:"bytes,12,opt,name=AccumulatedFees,proto3" json:"AccumulatedFees,omitempty"`
	DeveloperFees         []byte             `protobuf:"bytes,14,opt,name=DeveloperFees,proto3" json:"DeveloperFees,omitempty"`
	LastIncludedMetaNonce uint64             `protobuf:"varint,13,opt,name=LastIncludedMetaNonce,proto3" json:"LastIncludedMetaNonce,omitempty"`
}

func (x *ShardData) Reset() {
	*x = ShardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardData) ProtoMessage() {}

func (x *ShardData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardData.ProtoReflect.Descriptor instead.
func (*ShardData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{12}
}

func (x *ShardData) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *ShardData) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *ShardData) GetShardMiniBlockHeaders() []*MiniBlockHeader {
	if x != nil {
		return x.ShardMiniBlockHeaders
	}
	return nil
}

func (x *ShardData) GetPrevRandSeed() []byte {
	if x != nil {
		return x.PrevRandSeed
	}
	return nil
}

func (x *ShardData) GetPubKeysBitmap() []byte {
	if x != nil {
		return x.PubKeysBitmap
	}
	return nil
}

func (x *ShardData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ShardData) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *ShardData) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ShardData) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *ShardData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ShardData) GetNumPendingMiniBlocks() uint32 {
	if x != nil {
		return x.NumPendingMiniBlocks
	}
	return 0
}

func (x *ShardData) GetAccumulatedFees() []byte {
	if x != nil {
		return x.AccumulatedFees
	}
	return nil
}

func (x *ShardData) GetDeveloperFees() []byte {
	if x != nil {
		return x.DeveloperFees
	}
	return nil
}

func (x *ShardData) GetLastIncludedMetaNonce() uint64 {
	if x != nil {
		return x.LastIncludedMetaNonce
	}
	return 0
}

// EpochStart holds the block information for end-of-epoch
type EpochStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastFinalizedHeaders []*EpochStartShardData `protobuf:"bytes,1,rep,name=LastFinalizedHeaders,proto3" json:"LastFinalizedHeaders,omitempty"`
	Economics            *Economics             `protobuf:"bytes,2,opt,name=Economics,proto3" json:"Economics,omitempty"`
}

func (x *EpochStart) Reset() {
	*x = EpochStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochStart) ProtoMessage() {}

func (x *EpochStart) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochStart.ProtoReflect.Descriptor instead.
func (*EpochStart) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{13}
}

func (x *EpochStart) GetLastFinalizedHeaders() []*EpochStartShardData {
	if x != nil {
		return x.LastFinalizedHeaders
	}
	return nil
}

func (x *EpochStart) GetEconomics() *Economics {
	if x != nil {
		return x.Economics
	}
	return nil
}

type EpochStartShardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                 uint32             `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	HeaderHash              []byte             `protobuf:"bytes,2,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	RootHash                []byte             `protobuf:"bytes,3,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	FirstPendingMetaBlock   []byte             `protobuf:"bytes,4,opt,name=FirstPendingMetaBlock,proto3" json:"FirstPendingMetaBlock,omitempty"`
	LastFinishedMetaBlock   []byte             `protobuf:"bytes,5,opt,name=LastFinishedMetaBlock,proto3" json:"LastFinishedMetaBlock,omitempty"`
	PendingMiniBlockHeaders []*MiniBlockHeader `protobuf:"bytes,6,rep,name=PendingMiniBlockHeaders,proto3" json:"PendingMiniBlockHeaders,omitempty"`
	Round                   uint64             `protobuf:"varint,7,opt,name=Round,proto3" json:"Round,omitempty"`
	Nonce                   uint64             `protobuf:"varint,8,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Epoch                   uint32             `protobuf:"varint,9,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	ScheduledRootHash       []byte             `protobuf:"bytes,10,opt,name=ScheduledRootHash,proto3" json:"ScheduledRootHash,omitempty"`
}

func (x *EpochStartShardData) Reset() {
	*x = EpochStartShardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochStartShardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochStartShardData) ProtoMessage() {}

func (x *EpochStartShardData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochStartShardData.ProtoReflect.Descriptor instead.
func (*EpochStartShardData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{14}
}

func (x *EpochStartShardData) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *EpochStartShardData) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *EpochStartShardData) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *EpochStartShardData) GetFirstPendingMetaBlock() []byte {
	if x != nil {
		return x.FirstPendingMetaBlock
	}
	return nil
}

func (x *EpochStartShardData) GetLastFinishedMetaBlock() []byte {
	if x != nil {
		return x.LastFinishedMetaBlock
	}
	return nil
}

func (x *EpochStartShardData) GetPendingMiniBlockHeaders() []*MiniBlockHeader {
	if x != nil {
		return x.PendingMiniBlockHeaders
	}
	return nil
}

func (x *EpochStartShardData) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *EpochStartShardData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EpochStartShardData) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *EpochStartShardData) GetScheduledRootHash() []byte {
	if x != nil {
		return x.ScheduledRootHash
	}
	return nil
}

type Economics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSupply                      []byte `protobuf:"bytes,1,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`
	TotalToDistribute                []byte `protobuf:"bytes,2,opt,name=TotalToDistribute,proto3" json:"TotalToDistribute,omitempty"`
	TotalNewlyMinted                 []byte `protobuf:"bytes,3,opt,name=TotalNewlyMinted,proto3" json:"TotalNewlyMinted,omitempty"`
	RewardsPerBlock                  []byte `protobuf:"bytes,4,opt,name=RewardsPerBlock,proto3" json:"RewardsPerBlock,omitempty"`
	RewardsForProtocolSustainability []byte `protobuf:"bytes,5,opt,name=RewardsForProtocolSustainability,proto3" json:"RewardsForProtocolSustainability,omitempty"`
	NodePrice                        []byte `protobuf:"bytes,6,opt,name=NodePrice,proto3" json:"NodePrice,omitempty"`
	PrevEpochStartRound              uint64 `protobuf:"varint,7,opt,name=PrevEpochStartRound,proto3" json:"PrevEpochStartRound,omitempty"`
	PrevEpochStartHash               []byte `protobuf:"bytes,8,opt,name=PrevEpochStartHash,proto3" json:"PrevEpochStartHash,omitempty"`
}

func (x *Economics) Reset() {
	*x = Economics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Economics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Economics) ProtoMessage() {}

func (x *Economics) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Economics.ProtoReflect.Descriptor instead.
func (*Economics) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{15}
}

func (x *Economics) GetTotalSupply() []byte {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

func (x *Economics) GetTotalToDistribute() []byte {
	if x != nil {
		return x.TotalToDistribute
	}
	return nil
}

func (x *Economics) GetTotalNewlyMinted() []byte {
	if x != nil {
		return x.TotalNewlyMinted
	}
	return nil
}

func (x *Economics) GetRewardsPerBlock() []byte {
	if x != nil {
		return x.RewardsPerBlock
	}
	return nil
}

func (x *Economics) GetRewardsForProtocolSustainability() []byte {
	if x != nil {
		return x.RewardsForProtocolSustainability
	}
	return nil
}

func (x *Economics) GetNodePrice() []byte {
	if x != nil {
		return x.NodePrice
	}
	return nil
}

func (x *Economics) GetPrevEpochStartRound() uint64 {
	if x != nil {
		return x.PrevEpochStartRound
	}
	return 0
}

func (x *Economics) GetPrevEpochStartHash() []byte {
	if x != nil {
		return x.PrevEpochStartHash
	}
	return nil
}

// PeerData holds information about actions taken by a peer:
//   - a peer can register with an amount to become a validator
//   - a peer can choose to deregister and get back the deposited value
type PeerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte     `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PublicKey   []byte     `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Action      PeerAction `protobuf:"varint,3,opt,name=Action,proto3,enum=proto.PeerAction" json:"Action,omitempty"`
	TimeStamp   uint64     `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	ValueChange []byte     `protobuf:"bytes,5,opt,name=ValueChange,proto3" json:"ValueChange,omitempty"`
}

func (x *PeerData) Reset() {
	*x = PeerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerData) ProtoMessage() {}

func (x *PeerData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerData.ProtoReflect.Descriptor instead.
func (*PeerData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{16}
}

func (x *PeerData) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PeerData) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PeerData) GetAction() PeerAction {
	if x != nil {
		return x.Action
	}
	return PeerAction_InvalidAction
}

func (x *PeerData) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *PeerData) GetValueChange() []byte {
	if x != nil {
		return x.ValueChange
	}
	return nil
}

type TransactionPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions                               map[string]*TxInfo     `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmartContractResults                       map[string]*SCRInfo    `protobuf:"bytes,2,rep,name=SmartContractResults,proto3" json:"SmartContractResults,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rewards                                    map[string]*RewardInfo `protobuf:"bytes,3,rep,name=Rewards,proto3" json:"Rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Receipts                                   map[string]*Receipt    `protobuf:"bytes,4,rep,name=Receipts,proto3" json:"Receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidTxs                                 map[string]*TxInfo     `protobuf:"bytes,5,rep,name=InvalidTxs,proto3" json:"InvalidTxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                                       []*LogData             `protobuf:"bytes,6,rep,name=Logs,proto3" json:"Logs,omitempty"`
	ScheduledExecutedSCRSHashesPrevBlock       []string               `protobuf:"bytes,7,rep,name=ScheduledExecutedSCRSHashesPrevBlock,proto3" json:"ScheduledExecutedSCRSHashesPrevBlock,omitempty"`
	ScheduledExecutedInvalidTxsHashesPrevBlock []string               `protobuf:"bytes,8,rep,name=ScheduledExecutedInvalidTxsHashesPrevBlock,proto3" json:"ScheduledExecutedInvalidTxsHashesPrevBlock,omitempty"`
}

func (x *TransactionPool) Reset() {
	*x = TransactionPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPool) ProtoMessage() {}

func (x *TransactionPool) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPool.ProtoReflect.Descriptor instead.
func (*TransactionPool) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionPool) GetTransactions() map[string]*TxInfo {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionPool) GetSmartContractResults() map[string]*SCRInfo {
	if x != nil {
		return x.SmartContractResults
	}
	return nil
}

func (x *TransactionPool) GetRewards() map[string]*RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *TransactionPool) GetReceipts() map[string]*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *TransactionPool) GetInvalidTxs() map[string]*TxInfo {
	if x != nil {
		return x.InvalidTxs
	}
	return nil
}

func (x *TransactionPool) GetLogs() []*LogData {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TransactionPool) GetScheduledExecutedSCRSHashesPrevBlock() []string {
	if x != nil {
		return x.ScheduledExecutedSCRSHashesPrevBlock
	}
	return nil
}

func (x *TransactionPool) GetScheduledExecutedInvalidTxsHashesPrevBlock() []string {
	if x != nil {
		return x.ScheduledExecutedInvalidTxsHashesPrevBlock
	}
	return nil
}

type FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasUsed        uint64 `protobuf:"varint,1,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Fee            []byte `protobuf:"bytes,2,opt,name=Fee,proto3" json:"Fee,omitempty"`
	InitialPaidFee []byte `protobuf:"bytes,3,opt,name=InitialPaidFee,proto3" json:"InitialPaidFee,omitempty"`
}

func (x *FeeInfo) Reset() {
	*x = FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfo) ProtoMessage() {}

func (x *FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfo.ProtoReflect.Descriptor instead.
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{18}
}

func (x *FeeInfo) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *FeeInfo) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *FeeInfo) GetInitialPaidFee() []byte {
	if x != nil {
		return x.InitialPaidFee
	}
	return nil
}

type TxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction    *Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	FeeInfo        *FeeInfo     `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
	ExecutionOrder uint32       `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"ExecutionOrder,omitempty"`
}

func (x *TxInfo) Reset() {
	*x = TxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInfo) ProtoMessage() {}

func (x *TxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInfo.ProtoReflect.Descriptor instead.
func (*TxInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{19}
}

func (x *TxInfo) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TxInfo) GetFeeInfo() *FeeInfo {
	if x != nil {
		return x.FeeInfo
	}
	return nil
}

func (x *TxInfo) GetExecutionOrder() uint32 {
	if x != nil {
		return x.ExecutionOrder
	}
	return 0
}

type TxInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction          *Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	FeeInfo              *FeeInfo     `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
	ExecutionOrder       uint32       `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"ExecutionOrder,omitempty"`
	SmartContractResults *SCRInfo     `protobuf:"bytes,4,opt,name=SmartContractResults,proto3" json:"SmartContractResults,omitempty"`
	Logs                 []*Log       `protobuf:"bytes,5,rep,name=Logs,proto3" json:"Logs,omitempty"`
}

func (x *TxInfoV2) Reset() {
	*x = TxInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInfoV2) ProtoMessage() {}

func (x *TxInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInfoV2.ProtoReflect.Descriptor instead.
func (*TxInfoV2) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{20}
}

func (x *TxInfoV2) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TxInfoV2) GetFeeInfo() *FeeInfo {
	if x != nil {
		return x.FeeInfo
	}
	return nil
}

func (x *TxInfoV2) GetExecutionOrder() uint32 {
	if x != nil {
		return x.ExecutionOrder
	}
	return 0
}

func (x *TxInfoV2) GetSmartContractResults() *SCRInfo {
	if x != nil {
		return x.SmartContractResults
	}
	return nil
}

func (x *TxInfoV2) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SCRInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartContractResult *SmartContractResult `protobuf:"bytes,1,opt,name=SmartContractResult,proto3" json:"SmartContractResult,omitempty"`
	FeeInfo             *FeeInfo             `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
	ExecutionOrder      uint32               `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"ExecutionOrder,omitempty"`
}

func (x *SCRInfo) Reset() {
	*x = SCRInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRInfo) ProtoMessage() {}

func (x *SCRInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRInfo.ProtoReflect.Descriptor instead.
func (*SCRInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{21}
}

func (x *SCRInfo) GetSmartContractResult() *SmartContractResult {
	if x != nil {
		return x.SmartContractResult
	}
	return nil
}

func (x *SCRInfo) GetFeeInfo() *FeeInfo {
	if x != nil {
		return x.FeeInfo
	}
	return nil
}

func (x *SCRInfo) GetExecutionOrder() uint32 {
	if x != nil {
		return x.ExecutionOrder
	}
	return 0
}

type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Log    *Log   `protobuf:"bytes,2,opt,name=Log,proto3" json:"Log,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{22}
}

func (x *LogData) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *LogData) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

type RewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward         *RewardTx `protobuf:"bytes,1,opt,name=Reward,proto3" json:"Reward,omitempty"`
	ExecutionOrder uint32    `protobuf:"varint,2,opt,name=ExecutionOrder,proto3" json:"ExecutionOrder,omitempty"`
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{23}
}

func (x *RewardInfo) GetReward() *RewardTx {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *RewardInfo) GetExecutionOrder() uint32 {
	if x != nil {
		return x.ExecutionOrder
	}
	return 0
}

type HeaderGasConsumption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasProvided    uint64 `protobuf:"varint,1,opt,name=GasProvided,proto3" json:"GasProvided,omitempty"`
	GasRefunded    uint64 `protobuf:"varint,2,opt,name=GasRefunded,proto3" json:"GasRefunded,omitempty"`
	GasPenalized   uint64 `protobuf:"varint,3,opt,name=GasPenalized,proto3" json:"GasPenalized,omitempty"`
	MaxGasPerBlock uint64 `protobuf:"varint,4,opt,name=MaxGasPerBlock,proto3" json:"MaxGasPerBlock,omitempty"`
}

func (x *HeaderGasConsumption) Reset() {
	*x = HeaderGasConsumption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderGasConsumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderGasConsumption) ProtoMessage() {}

func (x *HeaderGasConsumption) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderGasConsumption.ProtoReflect.Descriptor instead.
func (*HeaderGasConsumption) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{24}
}

func (x *HeaderGasConsumption) GetGasProvided() uint64 {
	if x != nil {
		return x.GasProvided
	}
	return 0
}

func (x *HeaderGasConsumption) GetGasRefunded() uint64 {
	if x != nil {
		return x.GasRefunded
	}
	return 0
}

func (x *HeaderGasConsumption) GetGasPenalized() uint64 {
	if x != nil {
		return x.GasPenalized
	}
	return 0
}

func (x *HeaderGasConsumption) GetMaxGasPerBlock() uint64 {
	if x != nil {
		return x.MaxGasPerBlock
	}
	return 0
}

type ValidatorRatingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string  `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Rating    float32 `protobuf:"fixed32,2,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (x *ValidatorRatingInfo) Reset() {
	*x = ValidatorRatingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorRatingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorRatingInfo) ProtoMessage() {}

func (x *ValidatorRatingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorRatingInfo.ProtoReflect.Descriptor instead.
func (*ValidatorRatingInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{25}
}

func (x *ValidatorRatingInfo) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ValidatorRatingInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ValidatorsRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID              uint32                 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Epoch                uint32                 `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	ValidatorsRatingInfo []*ValidatorRatingInfo `protobuf:"bytes,3,rep,name=ValidatorsRatingInfo,proto3" json:"ValidatorsRatingInfo,omitempty"`
}

func (x *ValidatorsRating) Reset() {
	*x = ValidatorsRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorsRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorsRating) ProtoMessage() {}

func (x *ValidatorsRating) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorsRating.ProtoReflect.Descriptor instead.
func (*ValidatorsRating) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{26}
}

func (x *ValidatorsRating) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *ValidatorsRating) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ValidatorsRating) GetValidatorsRatingInfo() []*ValidatorRatingInfo {
	if x != nil {
		return x.ValidatorsRatingInfo
	}
	return nil
}

type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round            uint64   `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`
	SignersIndexes   []uint64 `protobuf:"varint,2,rep,packed,name=SignersIndexes,proto3" json:"SignersIndexes,omitempty"`
	BlockWasProposed bool     `protobuf:"varint,3,opt,name=BlockWasProposed,proto3" json:"BlockWasProposed,omitempty"`
	ShardId          uint32   `protobuf:"varint,4,opt,name=ShardId,proto3" json:"ShardId,omitempty"`
	Epoch            uint32   `protobuf:"varint,5,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Timestamp        uint64   `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{27}
}

func (x *RoundInfo) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundInfo) GetSignersIndexes() []uint64 {
	if x != nil {
		return x.SignersIndexes
	}
	return nil
}

func (x *RoundInfo) GetBlockWasProposed() bool {
	if x != nil {
		return x.BlockWasProposed
	}
	return false
}

func (x *RoundInfo) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RoundInfo) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RoundInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RoundsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID    uint32       `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	RoundsInfo []*RoundInfo `protobuf:"bytes,2,rep,name=RoundsInfo,proto3" json:"RoundsInfo,omitempty"`
}

func (x *RoundsInfo) Reset() {
	*x = RoundsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundsInfo) ProtoMessage() {}

func (x *RoundsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundsInfo.ProtoReflect.Descriptor instead.
func (*RoundsInfo) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{28}
}

func (x *RoundsInfo) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *RoundsInfo) GetRoundsInfo() []*RoundInfo {
	if x != nil {
		return x.RoundsInfo
	}
	return nil
}

type PubKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys [][]byte `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
}

func (x *PubKeys) Reset() {
	*x = PubKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeys) ProtoMessage() {}

func (x *PubKeys) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeys.ProtoReflect.Descriptor instead.
func (*PubKeys) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{29}
}

func (x *PubKeys) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ValidatorsPubKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID                uint32              `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	ShardValidatorsPubKeys map[uint32]*PubKeys `protobuf:"bytes,2,rep,name=ShardValidatorsPubKeys,proto3" json:"ShardValidatorsPubKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Epoch                  uint32              `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
}

func (x *ValidatorsPubKeys) Reset() {
	*x = ValidatorsPubKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorsPubKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorsPubKeys) ProtoMessage() {}

func (x *ValidatorsPubKeys) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorsPubKeys.ProtoReflect.Descriptor instead.
func (*ValidatorsPubKeys) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{30}
}

func (x *ValidatorsPubKeys) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *ValidatorsPubKeys) GetShardValidatorsPubKeys() map[uint32]*PubKeys {
	if x != nil {
		return x.ShardValidatorsPubKeys
	}
	return nil
}

func (x *ValidatorsPubKeys) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type Accounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID         uint32                     `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	BlockTimestamp  uint64                     `protobuf:"varint,2,opt,name=BlockTimestamp,proto3" json:"BlockTimestamp,omitempty"`
	AlteredAccounts map[string]*AlteredAccount `protobuf:"bytes,3,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Accounts) Reset() {
	*x = Accounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accounts) ProtoMessage() {}

func (x *Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accounts.ProtoReflect.Descriptor instead.
func (*Accounts) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{31}
}

func (x *Accounts) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *Accounts) GetBlockTimestamp() uint64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *Accounts) GetAlteredAccounts() map[string]*AlteredAccount {
	if x != nil {
		return x.AlteredAccounts
	}
	return nil
}

type FinalizedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID    uint32 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	HeaderHash []byte `protobuf:"bytes,2,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
}

func (x *FinalizedBlock) Reset() {
	*x = FinalizedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedBlock) ProtoMessage() {}

func (x *FinalizedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedBlock.ProtoReflect.Descriptor instead.
func (*FinalizedBlock) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{32}
}

func (x *FinalizedBlock) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *FinalizedBlock) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID uint32 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{33}
}

func (x *Shard) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniBlocks []*MiniBlock `protobuf:"bytes,1,rep,name=MiniBlocks,proto3" json:"MiniBlocks,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{34}
}

func (x *Body) GetMiniBlocks() []*MiniBlock {
	if x != nil {
		return x.MiniBlocks
	}
	return nil
}

type MiniBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHashes        [][]byte `protobuf:"bytes,1,rep,name=TxHashes,proto3" json:"TxHashes,omitempty"`
	ReceiverShardID uint32   `protobuf:"varint,2,opt,name=ReceiverShardID,proto3" json:"ReceiverShardID,omitempty"`
	SenderShardID   uint32   `protobuf:"varint,3,opt,name=SenderShardID,proto3" json:"SenderShardID,omitempty"`
	Type            Type     `protobuf:"varint,4,opt,name=Type,proto3,enum=proto.Type" json:"Type,omitempty"`
	Reserved        []byte   `protobuf:"bytes,5,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
}

func (x *MiniBlock) Reset() {
	*x = MiniBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniBlock) ProtoMessage() {}

func (x *MiniBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniBlock.ProtoReflect.Descriptor instead.
func (*MiniBlock) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{35}
}

func (x *MiniBlock) GetTxHashes() [][]byte {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

func (x *MiniBlock) GetReceiverShardID() uint32 {
	if x != nil {
		return x.ReceiverShardID
	}
	return 0
}

func (x *MiniBlock) GetSenderShardID() uint32 {
	if x != nil {
		return x.SenderShardID
	}
	return 0
}

func (x *MiniBlock) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TxBlock
}

func (x *MiniBlock) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

// Transaction holds all the data needed for a value transfer or SC call
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce             uint64 `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Value             []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	RcvAddr           []byte `protobuf:"bytes,3,opt,name=RcvAddr,proto3" json:"RcvAddr,omitempty"`
	RcvUserName       []byte `protobuf:"bytes,4,opt,name=RcvUserName,proto3" json:"RcvUserName,omitempty"`
	SndAddr           []byte `protobuf:"bytes,5,opt,name=SndAddr,proto3" json:"SndAddr,omitempty"`
	SndUserName       []byte `protobuf:"bytes,6,opt,name=SndUserName,proto3" json:"SndUserName,omitempty"`
	GasPrice          uint64 `protobuf:"varint,7,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasLimit          uint64 `protobuf:"varint,8,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	Data              []byte `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	ChainID           []byte `protobuf:"bytes,10,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Version           uint32 `protobuf:"varint,11,opt,name=Version,proto3" json:"Version,omitempty"`
	Signature         []byte `protobuf:"bytes,12,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Options           uint32 `protobuf:"varint,13,opt,name=Options,proto3" json:"Options,omitempty"`
	GuardianAddr      []byte `protobuf:"bytes,14,opt,name=GuardianAddr,proto3" json:"GuardianAddr,omitempty"`
	GuardianSignature []byte `protobuf:"bytes,15,opt,name=GuardianSignature,proto3" json:"GuardianSignature,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{36}
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Transaction) GetRcvAddr() []byte {
	if x != nil {
		return x.RcvAddr
	}
	return nil
}

func (x *Transaction) GetRcvUserName() []byte {
	if x != nil {
		return x.RcvUserName
	}
	return nil
}

func (x *Transaction) GetSndAddr() []byte {
	if x != nil {
		return x.SndAddr
	}
	return nil
}

func (x *Transaction) GetSndUserName() []byte {
	if x != nil {
		return x.SndUserName
	}
	return nil
}

func (x *Transaction) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Transaction) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Transaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Transaction) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Transaction) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

func (x *Transaction) GetGuardianAddr() []byte {
	if x != nil {
		return x.GuardianAddr
	}
	return nil
}

func (x *Transaction) GetGuardianSignature() []byte {
	if x != nil {
		return x.GuardianSignature
	}
	return nil
}

type SmartContractResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce          uint64 `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Value          []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	RcvAddr        []byte `protobuf:"bytes,3,opt,name=RcvAddr,proto3" json:"RcvAddr,omitempty"`
	SndAddr        []byte `protobuf:"bytes,4,opt,name=SndAddr,proto3" json:"SndAddr,omitempty"`
	RelayerAddr    []byte `protobuf:"bytes,5,opt,name=RelayerAddr,proto3" json:"RelayerAddr,omitempty"`
	RelayedValue   []byte `protobuf:"bytes,6,opt,name=RelayedValue,proto3" json:"RelayedValue,omitempty"`
	Code           []byte `protobuf:"bytes,7,opt,name=Code,proto3" json:"Code,omitempty"`
	Data           []byte `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
	PrevTxHash     []byte `protobuf:"bytes,9,opt,name=PrevTxHash,proto3" json:"PrevTxHash,omitempty"`
	OriginalTxHash []byte `protobuf:"bytes,10,opt,name=OriginalTxHash,proto3" json:"OriginalTxHash,omitempty"`
	GasLimit       uint64 `protobuf:"varint,11,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasPrice       uint64 `protobuf:"varint,12,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	CallType       int64  `protobuf:"varint,13,opt,name=CallType,proto3" json:"CallType,omitempty"`
	CodeMetadata   []byte `protobuf:"bytes,14,opt,name=CodeMetadata,proto3" json:"CodeMetadata,omitempty"`
	ReturnMessage  []byte `protobuf:"bytes,15,opt,name=ReturnMessage,proto3" json:"ReturnMessage,omitempty"`
	OriginalSender []byte `protobuf:"bytes,16,opt,name=OriginalSender,proto3" json:"OriginalSender,omitempty"`
}

func (x *SmartContractResult) Reset() {
	*x = SmartContractResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractResult) ProtoMessage() {}

func (x *SmartContractResult) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractResult.ProtoReflect.Descriptor instead.
func (*SmartContractResult) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{37}
}

func (x *SmartContractResult) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SmartContractResult) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SmartContractResult) GetRcvAddr() []byte {
	if x != nil {
		return x.RcvAddr
	}
	return nil
}

func (x *SmartContractResult) GetSndAddr() []byte {
	if x != nil {
		return x.SndAddr
	}
	return nil
}

func (x *SmartContractResult) GetRelayerAddr() []byte {
	if x != nil {
		return x.RelayerAddr
	}
	return nil
}

func (x *SmartContractResult) GetRelayedValue() []byte {
	if x != nil {
		return x.RelayedValue
	}
	return nil
}

func (x *SmartContractResult) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SmartContractResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SmartContractResult) GetPrevTxHash() []byte {
	if x != nil {
		return x.PrevTxHash
	}
	return nil
}

func (x *SmartContractResult) GetOriginalTxHash() []byte {
	if x != nil {
		return x.OriginalTxHash
	}
	return nil
}

func (x *SmartContractResult) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SmartContractResult) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *SmartContractResult) GetCallType() int64 {
	if x != nil {
		return x.CallType
	}
	return 0
}

func (x *SmartContractResult) GetCodeMetadata() []byte {
	if x != nil {
		return x.CodeMetadata
	}
	return nil
}

func (x *SmartContractResult) GetReturnMessage() []byte {
	if x != nil {
		return x.ReturnMessage
	}
	return nil
}

func (x *SmartContractResult) GetOriginalSender() []byte {
	if x != nil {
		return x.OriginalSender
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Events  []*Event `protobuf:"bytes,2,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{38}
}

func (x *Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Identifier     []byte   `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Topics         [][]byte `protobuf:"bytes,3,rep,name=Topics,proto3" json:"Topics,omitempty"`
	Data           []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	AdditionalData [][]byte `protobuf:"bytes,5,rep,name=AdditionalData,proto3" json:"AdditionalData,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{39}
}

func (x *Event) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Event) GetIdentifier() []byte {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Event) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetAdditionalData() [][]byte {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type RewardTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round   uint64 `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Value   []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	RcvAddr []byte `protobuf:"bytes,4,opt,name=RcvAddr,proto3" json:"RcvAddr,omitempty"`
	Epoch   uint32 `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
}

func (x *RewardTx) Reset() {
	*x = RewardTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardTx) ProtoMessage() {}

func (x *RewardTx) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardTx.ProtoReflect.Descriptor instead.
func (*RewardTx) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{40}
}

func (x *RewardTx) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RewardTx) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RewardTx) GetRcvAddr() []byte {
	if x != nil {
		return x.RcvAddr
	}
	return nil
}

func (x *RewardTx) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type AlteredAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string                 `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Nonce          uint64                 `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Balance        string                 `protobuf:"bytes,3,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Tokens         []*AccountTokenData    `protobuf:"bytes,4,rep,name=Tokens,proto3" json:"Tokens,omitempty"`
	AdditionalData *AdditionalAccountData `protobuf:"bytes,5,opt,name=AdditionalData,proto3" json:"AdditionalData,omitempty"`
}

func (x *AlteredAccount) Reset() {
	*x = AlteredAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlteredAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlteredAccount) ProtoMessage() {}

func (x *AlteredAccount) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlteredAccount.ProtoReflect.Descriptor instead.
func (*AlteredAccount) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{41}
}

func (x *AlteredAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AlteredAccount) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AlteredAccount) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AlteredAccount) GetTokens() []*AccountTokenData {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *AlteredAccount) GetAdditionalData() *AdditionalAccountData {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type AccountTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce          uint64                      `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Identifier     string                      `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Balance        string                      `protobuf:"bytes,3,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Properties     string                      `protobuf:"bytes,4,opt,name=Properties,proto3" json:"Properties,omitempty"`
	MetaData       *TokenMetaData              `protobuf:"bytes,5,opt,name=MetaData,proto3" json:"MetaData,omitempty"`
	AdditionalData *AdditionalAccountTokenData `protobuf:"bytes,6,opt,name=AdditionalData,proto3" json:"AdditionalData,omitempty"`
}

func (x *AccountTokenData) Reset() {
	*x = AccountTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTokenData) ProtoMessage() {}

func (x *AccountTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTokenData.ProtoReflect.Descriptor instead.
func (*AccountTokenData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{42}
}

func (x *AccountTokenData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccountTokenData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AccountTokenData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AccountTokenData) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *AccountTokenData) GetMetaData() *TokenMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *AccountTokenData) GetAdditionalData() *AdditionalAccountTokenData {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type TokenMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce      uint64   `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Creator    string   `protobuf:"bytes,3,opt,name=Creator,proto3" json:"Creator,omitempty"`
	Royalties  uint32   `protobuf:"varint,4,opt,name=Royalties,proto3" json:"Royalties,omitempty"`
	Hash       []byte   `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	URIs       [][]byte `protobuf:"bytes,6,rep,name=URIs,proto3" json:"URIs,omitempty"`
	Attributes []byte   `protobuf:"bytes,7,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
}

func (x *TokenMetaData) Reset() {
	*x = TokenMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMetaData) ProtoMessage() {}

func (x *TokenMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMetaData.ProtoReflect.Descriptor instead.
func (*TokenMetaData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{43}
}

func (x *TokenMetaData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TokenMetaData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenMetaData) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TokenMetaData) GetRoyalties() uint32 {
	if x != nil {
		return x.Royalties
	}
	return 0
}

func (x *TokenMetaData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TokenMetaData) GetURIs() [][]byte {
	if x != nil {
		return x.URIs
	}
	return nil
}

func (x *TokenMetaData) GetAttributes() []byte {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type AdditionalAccountTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNFTCreate bool `protobuf:"varint,1,opt,name=IsNFTCreate,proto3" json:"IsNFTCreate,omitempty"`
}

func (x *AdditionalAccountTokenData) Reset() {
	*x = AdditionalAccountTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalAccountTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalAccountTokenData) ProtoMessage() {}

func (x *AdditionalAccountTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalAccountTokenData.ProtoReflect.Descriptor instead.
func (*AdditionalAccountTokenData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{44}
}

func (x *AdditionalAccountTokenData) GetIsNFTCreate() bool {
	if x != nil {
		return x.IsNFTCreate
	}
	return false
}

type AdditionalAccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSender         bool   `protobuf:"varint,1,opt,name=IsSender,proto3" json:"IsSender,omitempty"`
	BalanceChanged   bool   `protobuf:"varint,2,opt,name=BalanceChanged,proto3" json:"BalanceChanged,omitempty"`
	CurrentOwner     string `protobuf:"bytes,3,opt,name=CurrentOwner,proto3" json:"CurrentOwner,omitempty"`
	UserName         string `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	DeveloperRewards string `protobuf:"bytes,5,opt,name=DeveloperRewards,proto3" json:"DeveloperRewards,omitempty"`
	CodeHash         []byte `protobuf:"bytes,6,opt,name=CodeHash,proto3" json:"CodeHash,omitempty"`
	RootHash         []byte `protobuf:"bytes,7,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	CodeMetadata     []byte `protobuf:"bytes,8,opt,name=CodeMetadata,proto3" json:"CodeMetadata,omitempty"`
}

func (x *AdditionalAccountData) Reset() {
	*x = AdditionalAccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalAccountData) ProtoMessage() {}

func (x *AdditionalAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalAccountData.ProtoReflect.Descriptor instead.
func (*AdditionalAccountData) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{45}
}

func (x *AdditionalAccountData) GetIsSender() bool {
	if x != nil {
		return x.IsSender
	}
	return false
}

func (x *AdditionalAccountData) GetBalanceChanged() bool {
	if x != nil {
		return x.BalanceChanged
	}
	return false
}

func (x *AdditionalAccountData) GetCurrentOwner() string {
	if x != nil {
		return x.CurrentOwner
	}
	return ""
}

func (x *AdditionalAccountData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AdditionalAccountData) GetDeveloperRewards() string {
	if x != nil {
		return x.DeveloperRewards
	}
	return ""
}

func (x *AdditionalAccountData) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *AdditionalAccountData) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *AdditionalAccountData) GetCodeMetadata() []byte {
	if x != nil {
		return x.CodeMetadata
	}
	return nil
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   []byte `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	SndAddr []byte `protobuf:"bytes,2,opt,name=SndAddr,proto3" json:"SndAddr,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	TxHash  []byte `protobuf:"bytes,4,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{46}
}

func (x *Receipt) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Receipt) GetSndAddr() []byte {
	if x != nil {
		return x.SndAddr
	}
	return nil
}

func (x *Receipt) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Receipt) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperOutportBlock_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_hyperOutportBlock_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_hyperOutportBlock_proto_rawDescGZIP(), []int{47}
}

func (x *BigInt) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

var File_hyperOutportBlock_proto protoreflect.FileDescriptor

var file_hyperOutportBlock_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x79, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbd, 0x01, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x75,
	0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x75, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x4f,
	0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x1b, 0x4e,
	0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f,
	0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x1b, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4e, 0x6f,
	0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x9c, 0x05, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x40, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x4e,
	0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x59, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a,
	0x05, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x4f, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x6f,
	0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x4e, 0x6f, 0x74, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x59, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x05, 0x0a, 0x13,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x56, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x32,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x4f, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x4e,
	0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x59, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6,
	0x06, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x56, 0x32, 0x12, 0x4e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x56, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x32, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x56,
	0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x78, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x53, 0x43, 0x52, 0x53,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x24, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x53, 0x43, 0x52, 0x53, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x2a, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x2a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x50, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x06, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x76,
	0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31,
	0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x10, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xac, 0x07, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x42, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x0a, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x0a, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x46, 0x65,
	0x65, 0x73, 0x49, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x44, 0x65, 0x76, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x04, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x14,
	0x49, 0x6e, 0x74, 0x72, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14, 0x49, 0x6e,
	0x74, 0x72, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x3a, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x47, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x47, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x22, 0xbb, 0x04, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x49, 0x6e,
	0x74, 0x72, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x72,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a,
	0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x47, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x22, 0x97, 0x04, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x15, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72,
	0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x4e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x4e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x09,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x13, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a,
	0x15, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x17, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x17, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xfd, 0x02, 0x0a, 0x09, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x77, 0x6c,
	0x79, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x77, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x50, 0x72, 0x65, 0x76, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x50, 0x72, 0x65, 0x76, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf9, 0x07, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x53,
	0x43, 0x52, 0x53, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x24, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x53, 0x43, 0x52, 0x53, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5e,
	0x0a, 0x2a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x2a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x4e,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57,
	0x0a, 0x19, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x43, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5d, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x46, 0x65, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32,
	0x12, 0x34, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x43, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x04,
	0x4c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x07, 0x53, 0x43, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x13, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x13, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x4c, 0x6f, 0x67, 0x22, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x78, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x47, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x47, 0x61, 0x73,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78,
	0x47, 0x61, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x4b, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x92,
	0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x57, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x0a, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x6c, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x53, 0x68, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x59, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x4e, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x1a, 0x59, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x22, 0x21, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xbb, 0x03, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x63, 0x76, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x63, 0x76, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x53, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x13, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x63, 0x76, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x52, 0x63, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x45, 0x0a,
	0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x08,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x63, 0x76, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x63, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x52, 0x49, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x04, 0x55, 0x52, 0x49, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4e, 0x46, 0x54, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x46, 0x54,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x07,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x53, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2a, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x65, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x4a, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x55, 0x6e,
	0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10, 0x07, 0x2a, 0x88, 0x01, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x1e,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x3c, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x5a, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x78, 0x12,
	0x11, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10,
	0x96, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x10, 0xff, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x78, 0x2f, 0x6d,
	0x78, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x77, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2d, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x67, 0x6f,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hyperOutportBlock_proto_rawDescOnce sync.Once
	file_hyperOutportBlock_proto_rawDescData = file_hyperOutportBlock_proto_rawDesc
)

func file_hyperOutportBlock_proto_rawDescGZIP() []byte {
	file_hyperOutportBlock_proto_rawDescOnce.Do(func() {
		file_hyperOutportBlock_proto_rawDescData = protoimpl.X.CompressGZIP(file_hyperOutportBlock_proto_rawDescData)
	})
	return file_hyperOutportBlock_proto_rawDescData
}

var file_hyperOutportBlock_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hyperOutportBlock_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_hyperOutportBlock_proto_goTypes = []interface{}{
	(PeerAction)(0),                    // 0: proto.PeerAction
	(Type)(0),                          // 1: proto.Type
	(*HyperOutportBlock)(nil),          // 2: proto.HyperOutportBlock
	(*NotarizedHeaderOutportData)(nil), // 3: proto.NotarizedHeaderOutportData
	(*MetaOutportBlock)(nil),           // 4: proto.MetaOutportBlock
	(*ShardOutportBlock)(nil),          // 5: proto.ShardOutportBlock
	(*ShardOutportBlockV2)(nil),        // 6: proto.ShardOutportBlockV2
	(*TransactionPoolV2)(nil),          // 7: proto.TransactionPoolV2
	(*Header)(nil),                     // 8: proto.Header
	(*MetaHeader)(nil),                 // 9: proto.MetaHeader
	(*MiniBlockHeader)(nil),            // 10: proto.MiniBlockHeader
	(*PeerChange)(nil),                 // 11: proto.PeerChange
	(*BlockData)(nil),                  // 12: proto.BlockData
	(*MetaBlockData)(nil),              // 13: proto.MetaBlockData
	(*ShardData)(nil),                  // 14: proto.ShardData
	(*EpochStart)(nil),                 // 15: proto.EpochStart
	(*EpochStartShardData)(nil),        // 16: proto.EpochStartShardData
	(*Economics)(nil),                  // 17: proto.Economics
	(*PeerData)(nil),                   // 18: proto.PeerData
	(*TransactionPool)(nil),            // 19: proto.TransactionPool
	(*FeeInfo)(nil),                    // 20: proto.FeeInfo
	(*TxInfo)(nil),                     // 21: proto.TxInfo
	(*TxInfoV2)(nil),                   // 22: proto.TxInfoV2
	(*SCRInfo)(nil),                    // 23: proto.SCRInfo
	(*LogData)(nil),                    // 24: proto.LogData
	(*RewardInfo)(nil),                 // 25: proto.RewardInfo
	(*HeaderGasConsumption)(nil),       // 26: proto.HeaderGasConsumption
	(*ValidatorRatingInfo)(nil),        // 27: proto.ValidatorRatingInfo
	(*ValidatorsRating)(nil),           // 28: proto.ValidatorsRating
	(*RoundInfo)(nil),                  // 29: proto.RoundInfo
	(*RoundsInfo)(nil),                 // 30: proto.RoundsInfo
	(*PubKeys)(nil),                    // 31: proto.PubKeys
	(*ValidatorsPubKeys)(nil),          // 32: proto.ValidatorsPubKeys
	(*Accounts)(nil),                   // 33: proto.Accounts
	(*FinalizedBlock)(nil),             // 34: proto.FinalizedBlock
	(*Shard)(nil),                      // 35: proto.Shard
	(*Body)(nil),                       // 36: proto.Body
	(*MiniBlock)(nil),                  // 37: proto.MiniBlock
	(*Transaction)(nil),                // 38: proto.Transaction
	(*SmartContractResult)(nil),        // 39: proto.SmartContractResult
	(*Log)(nil),                        // 40: proto.Log
	(*Event)(nil),                      // 41: proto.Event
	(*RewardTx)(nil),                   // 42: proto.RewardTx
	(*AlteredAccount)(nil),             // 43: proto.AlteredAccount
	(*AccountTokenData)(nil),           // 44: proto.AccountTokenData
	(*TokenMetaData)(nil),              // 45: proto.TokenMetaData
	(*AdditionalAccountTokenData)(nil), // 46: proto.AdditionalAccountTokenData
	(*AdditionalAccountData)(nil),      // 47: proto.AdditionalAccountData
	(*Receipt)(nil),                    // 48: proto.Receipt
	(*BigInt)(nil),                     // 49: proto.BigInt
	nil,                                // 50: proto.MetaOutportBlock.AlteredAccountsEntry
	nil,                                // 51: proto.ShardOutportBlock.AlteredAccountsEntry
	nil,                                // 52: proto.ShardOutportBlockV2.AlteredAccountsEntry
	nil,                                // 53: proto.TransactionPoolV2.TransactionsEntry
	nil,                                // 54: proto.TransactionPoolV2.RewardsEntry
	nil,                                // 55: proto.TransactionPoolV2.ReceiptsEntry
	nil,                                // 56: proto.TransactionPoolV2.InvalidTxsEntry
	nil,                                // 57: proto.TransactionPool.TransactionsEntry
	nil,                                // 58: proto.TransactionPool.SmartContractResultsEntry
	nil,                                // 59: proto.TransactionPool.RewardsEntry
	nil,                                // 60: proto.TransactionPool.ReceiptsEntry
	nil,                                // 61: proto.TransactionPool.InvalidTxsEntry
	nil,                                // 62: proto.ValidatorsPubKeys.ShardValidatorsPubKeysEntry
	nil,                                // 63: proto.Accounts.AlteredAccountsEntry
}
var file_hyperOutportBlock_proto_depIdxs = []int32{
	4,  // 0: proto.HyperOutportBlock.MetaOutportBlock:type_name -> proto.MetaOutportBlock
	3,  // 1: proto.HyperOutportBlock.NotarizedHeadersOutportData:type_name -> proto.NotarizedHeaderOutportData
	5,  // 2: proto.NotarizedHeaderOutportData.OutportBlock:type_name -> proto.ShardOutportBlock
	13, // 3: proto.MetaOutportBlock.BlockData:type_name -> proto.MetaBlockData
	19, // 4: proto.MetaOutportBlock.TransactionPool:type_name -> proto.TransactionPool
	26, // 5: proto.MetaOutportBlock.HeaderGasConsumption:type_name -> proto.HeaderGasConsumption
	50, // 6: proto.MetaOutportBlock.AlteredAccounts:type_name -> proto.MetaOutportBlock.AlteredAccountsEntry
	12, // 7: proto.ShardOutportBlock.BlockData:type_name -> proto.BlockData
	19, // 8: proto.ShardOutportBlock.TransactionPool:type_name -> proto.TransactionPool
	26, // 9: proto.ShardOutportBlock.HeaderGasConsumption:type_name -> proto.HeaderGasConsumption
	51, // 10: proto.ShardOutportBlock.AlteredAccounts:type_name -> proto.ShardOutportBlock.AlteredAccountsEntry
	12, // 11: proto.ShardOutportBlockV2.BlockData:type_name -> proto.BlockData
	7,  // 12: proto.ShardOutportBlockV2.TransactionPool:type_name -> proto.TransactionPoolV2
	26, // 13: proto.ShardOutportBlockV2.HeaderGasConsumption:type_name -> proto.HeaderGasConsumption
	52, // 14: proto.ShardOutportBlockV2.AlteredAccounts:type_name -> proto.ShardOutportBlockV2.AlteredAccountsEntry
	53, // 15: proto.TransactionPoolV2.Transactions:type_name -> proto.TransactionPoolV2.TransactionsEntry
	54, // 16: proto.TransactionPoolV2.Rewards:type_name -> proto.TransactionPoolV2.RewardsEntry
	55, // 17: proto.TransactionPoolV2.Receipts:type_name -> proto.TransactionPoolV2.ReceiptsEntry
	56, // 18: proto.TransactionPoolV2.InvalidTxs:type_name -> proto.TransactionPoolV2.InvalidTxsEntry
	24, // 19: proto.TransactionPoolV2.Logs:type_name -> proto.LogData
	1,  // 20: proto.Header.BlockBodyType:type_name -> proto.Type
	10, // 21: proto.Header.MiniBlockHeaders:type_name -> proto.MiniBlockHeader
	11, // 22: proto.Header.PeerChanges:type_name -> proto.PeerChange
	14, // 23: proto.MetaHeader.ShardInfo:type_name -> proto.ShardData
	18, // 24: proto.MetaHeader.PeerInfo:type_name -> proto.PeerData
	10, // 25: proto.MetaHeader.MiniBlockHeaders:type_name -> proto.MiniBlockHeader
	15, // 26: proto.MetaHeader.EpochStart:type_name -> proto.EpochStart
	1,  // 27: proto.MiniBlockHeader.Type:type_name -> proto.Type
	8,  // 28: proto.BlockData.Header:type_name -> proto.Header
	36, // 29: proto.BlockData.Body:type_name -> proto.Body
	37, // 30: proto.BlockData.IntraShardMiniBlocks:type_name -> proto.MiniBlock
	9,  // 31: proto.MetaBlockData.Header:type_name -> proto.MetaHeader
	36, // 32: proto.MetaBlockData.Body:type_name -> proto.Body
	37, // 33: proto.MetaBlockData.IntraShardMiniBlocks:type_name -> proto.MiniBlock
	10, // 34: proto.ShardData.ShardMiniBlockHeaders:type_name -> proto.MiniBlockHeader
	16, // 35: proto.EpochStart.LastFinalizedHeaders:type_name -> proto.EpochStartShardData
	17, // 36: proto.EpochStart.Economics:type_name -> proto.Economics
	10, // 37: proto.EpochStartShardData.PendingMiniBlockHeaders:type_name -> proto.MiniBlockHeader
	0,  // 38: proto.PeerData.Action:type_name -> proto.PeerAction
	57, // 39: proto.TransactionPool.Transactions:type_name -> proto.TransactionPool.TransactionsEntry
	58, // 40: proto.TransactionPool.SmartContractResults:type_name -> proto.TransactionPool.SmartContractResultsEntry
	59, // 41: proto.TransactionPool.Rewards:type_name -> proto.TransactionPool.RewardsEntry
	60, // 42: proto.TransactionPool.Receipts:type_name -> proto.TransactionPool.ReceiptsEntry
	61, // 43: proto.TransactionPool.InvalidTxs:type_name -> proto.TransactionPool.InvalidTxsEntry
	24, // 44: proto.TransactionPool.Logs:type_name -> proto.LogData
	38, // 45: proto.TxInfo.Transaction:type_name -> proto.Transaction
	20, // 46: proto.TxInfo.FeeInfo:type_name -> proto.FeeInfo
	38, // 47: proto.TxInfoV2.Transaction:type_name -> proto.Transaction
	20, // 48: proto.TxInfoV2.FeeInfo:type_name -> proto.FeeInfo
	23, // 49: proto.TxInfoV2.SmartContractResults:type_name -> proto.SCRInfo
	40, // 50: proto.TxInfoV2.Logs:type_name -> proto.Log
	39, // 51: proto.SCRInfo.SmartContractResult:type_name -> proto.SmartContractResult
	20, // 52: proto.SCRInfo.FeeInfo:type_name -> proto.FeeInfo
	40, // 53: proto.LogData.Log:type_name -> proto.Log
	42, // 54: proto.RewardInfo.Reward:type_name -> proto.RewardTx
	27, // 55: proto.ValidatorsRating.ValidatorsRatingInfo:type_name -> proto.ValidatorRatingInfo
	29, // 56: proto.RoundsInfo.RoundsInfo:type_name -> proto.RoundInfo
	62, // 57: proto.ValidatorsPubKeys.ShardValidatorsPubKeys:type_name -> proto.ValidatorsPubKeys.ShardValidatorsPubKeysEntry
	63, // 58: proto.Accounts.AlteredAccounts:type_name -> proto.Accounts.AlteredAccountsEntry
	37, // 59: proto.Body.MiniBlocks:type_name -> proto.MiniBlock
	1,  // 60: proto.MiniBlock.Type:type_name -> proto.Type
	41, // 61: proto.Log.Events:type_name -> proto.Event
	44, // 62: proto.AlteredAccount.Tokens:type_name -> proto.AccountTokenData
	47, // 63: proto.AlteredAccount.AdditionalData:type_name -> proto.AdditionalAccountData
	45, // 64: proto.AccountTokenData.MetaData:type_name -> proto.TokenMetaData
	46, // 65: proto.AccountTokenData.AdditionalData:type_name -> proto.AdditionalAccountTokenData
	43, // 66: proto.MetaOutportBlock.AlteredAccountsEntry.value:type_name -> proto.AlteredAccount
	43, // 67: proto.ShardOutportBlock.AlteredAccountsEntry.value:type_name -> proto.AlteredAccount
	43, // 68: proto.ShardOutportBlockV2.AlteredAccountsEntry.value:type_name -> proto.AlteredAccount
	22, // 69: proto.TransactionPoolV2.TransactionsEntry.value:type_name -> proto.TxInfoV2
	25, // 70: proto.TransactionPoolV2.RewardsEntry.value:type_name -> proto.RewardInfo
	48, // 71: proto.TransactionPoolV2.ReceiptsEntry.value:type_name -> proto.Receipt
	21, // 72: proto.TransactionPoolV2.InvalidTxsEntry.value:type_name -> proto.TxInfo
	21, // 73: proto.TransactionPool.TransactionsEntry.value:type_name -> proto.TxInfo
	23, // 74: proto.TransactionPool.SmartContractResultsEntry.value:type_name -> proto.SCRInfo
	25, // 75: proto.TransactionPool.RewardsEntry.value:type_name -> proto.RewardInfo
	48, // 76: proto.TransactionPool.ReceiptsEntry.value:type_name -> proto.Receipt
	21, // 77: proto.TransactionPool.InvalidTxsEntry.value:type_name -> proto.TxInfo
	31, // 78: proto.ValidatorsPubKeys.ShardValidatorsPubKeysEntry.value:type_name -> proto.PubKeys
	43, // 79: proto.Accounts.AlteredAccountsEntry.value:type_name -> proto.AlteredAccount
	80, // [80:80] is the sub-list for method output_type
	80, // [80:80] is the sub-list for method input_type
	80, // [80:80] is the sub-list for extension type_name
	80, // [80:80] is the sub-list for extension extendee
	0,  // [0:80] is the sub-list for field type_name
}

func init() { file_hyperOutportBlock_proto_init() }
func file_hyperOutportBlock_proto_init() {
	if File_hyperOutportBlock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hyperOutportBlock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperOutportBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotarizedHeaderOutportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaOutportBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardOutportBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardOutportBlockV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPoolV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochStartShardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Economics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderGasConsumption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorRatingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorsRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorsPubKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlteredAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalAccountTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalAccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperOutportBlock_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hyperOutportBlock_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hyperOutportBlock_proto_goTypes,
		DependencyIndexes: file_hyperOutportBlock_proto_depIdxs,
		EnumInfos:         file_hyperOutportBlock_proto_enumTypes,
		MessageInfos:      file_hyperOutportBlock_proto_msgTypes,
	}.Build()
	File_hyperOutportBlock_proto = out.File
	file_hyperOutportBlock_proto_rawDesc = nil
	file_hyperOutportBlock_proto_goTypes = nil
	file_hyperOutportBlock_proto_depIdxs = nil
}
