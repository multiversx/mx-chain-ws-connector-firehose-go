// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: data/hyperOutportBlocks/hyperOutportBlocks.proto

package hyperOutportBlocks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HyperOutportBlockServiceClient is the client API for HyperOutportBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperOutportBlockServiceClient interface {
	GetHyperOutportBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error)
	GetHyperOutportBlockByNonce(ctx context.Context, in *BlockNonceRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error)
}

type hyperOutportBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperOutportBlockServiceClient(cc grpc.ClientConnInterface) HyperOutportBlockServiceClient {
	return &hyperOutportBlockServiceClient{cc}
}

func (c *hyperOutportBlockServiceClient) GetHyperOutportBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error) {
	out := new(HyperOutportBlock)
	err := c.cc.Invoke(ctx, "/proto.HyperOutportBlockService/GetHyperOutportBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperOutportBlockServiceClient) GetHyperOutportBlockByNonce(ctx context.Context, in *BlockNonceRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error) {
	out := new(HyperOutportBlock)
	err := c.cc.Invoke(ctx, "/proto.HyperOutportBlockService/GetHyperOutportBlockByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperOutportBlockServiceServer is the server API for HyperOutportBlockService service.
// All implementations must embed UnimplementedHyperOutportBlockServiceServer
// for forward compatibility
type HyperOutportBlockServiceServer interface {
	GetHyperOutportBlockByHash(context.Context, *BlockHashRequest) (*HyperOutportBlock, error)
	GetHyperOutportBlockByNonce(context.Context, *BlockNonceRequest) (*HyperOutportBlock, error)
	mustEmbedUnimplementedHyperOutportBlockServiceServer()
}

// UnimplementedHyperOutportBlockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHyperOutportBlockServiceServer struct {
}

func (UnimplementedHyperOutportBlockServiceServer) GetHyperOutportBlockByHash(context.Context, *BlockHashRequest) (*HyperOutportBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperOutportBlockByHash not implemented")
}
func (UnimplementedHyperOutportBlockServiceServer) GetHyperOutportBlockByNonce(context.Context, *BlockNonceRequest) (*HyperOutportBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperOutportBlockByNonce not implemented")
}
func (UnimplementedHyperOutportBlockServiceServer) mustEmbedUnimplementedHyperOutportBlockServiceServer() {
}

// UnsafeHyperOutportBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperOutportBlockServiceServer will
// result in compilation errors.
type UnsafeHyperOutportBlockServiceServer interface {
	mustEmbedUnimplementedHyperOutportBlockServiceServer()
}

func RegisterHyperOutportBlockServiceServer(s grpc.ServiceRegistrar, srv HyperOutportBlockServiceServer) {
	s.RegisterService(&HyperOutportBlockService_ServiceDesc, srv)
}

func _HyperOutportBlockService_GetHyperOutportBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HyperOutportBlockService/GetHyperOutportBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlockByHash(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperOutportBlockService_GetHyperOutportBlockByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlockByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HyperOutportBlockService/GetHyperOutportBlockByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlockByNonce(ctx, req.(*BlockNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HyperOutportBlockService_ServiceDesc is the grpc.ServiceDesc for HyperOutportBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperOutportBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HyperOutportBlockService",
	HandlerType: (*HyperOutportBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHyperOutportBlockByHash",
			Handler:    _HyperOutportBlockService_GetHyperOutportBlockByHash_Handler,
		},
		{
			MethodName: "GetHyperOutportBlockByNonce",
			Handler:    _HyperOutportBlockService_GetHyperOutportBlockByNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/hyperOutportBlocks/hyperOutportBlocks.proto",
}
