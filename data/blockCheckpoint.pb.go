// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockCheckpoint.proto

package data

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockCheckpoint struct {
	LastRounds map[uint32]uint64 `protobuf:"bytes,1,rep,name=LastRounds,proto3" json:"LastRounds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *BlockCheckpoint) Reset()      { *m = BlockCheckpoint{} }
func (*BlockCheckpoint) ProtoMessage() {}
func (*BlockCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_815c4a3e98f40a8a, []int{0}
}
func (m *BlockCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCheckpoint.Merge(m, src)
}
func (m *BlockCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *BlockCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCheckpoint proto.InternalMessageInfo

func (m *BlockCheckpoint) GetLastRounds() map[uint32]uint64 {
	if m != nil {
		return m.LastRounds
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockCheckpoint)(nil), "proto.BlockCheckpoint")
	proto.RegisterMapType((map[uint32]uint64)(nil), "proto.BlockCheckpoint.LastRoundsEntry")
}

func init() { proto.RegisterFile("blockCheckpoint.proto", fileDescriptor_815c4a3e98f40a8a) }

var fileDescriptor_815c4a3e98f40a8a = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xca, 0xc9, 0x4f,
	0xce, 0x76, 0xce, 0x48, 0x4d, 0xce, 0x2e, 0xc8, 0xcf, 0xcc, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x33, 0x18, 0xb9, 0xf8, 0x9d, 0x50, 0x15, 0x08, 0xb9, 0x71,
	0x71, 0xf9, 0x24, 0x16, 0x97, 0x04, 0xe5, 0x97, 0xe6, 0xa5, 0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6b,
	0x70, 0x1b, 0xa9, 0x41, 0xb4, 0xe9, 0xa1, 0xa9, 0xd5, 0x43, 0x28, 0x74, 0xcd, 0x2b, 0x29, 0xaa,
	0x0c, 0x42, 0xd2, 0x29, 0x65, 0xcb, 0xc5, 0x8f, 0x26, 0x2d, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a,
	0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6,
	0x94, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x4e,
	0xe5, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3, 0x23,
	0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1,
	0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x1c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x73, 0x4b, 0x73, 0x4a, 0x32, 0xcb, 0x52, 0x8b, 0x8a, 0x2b, 0xf4,
	0x73, 0x2b, 0x74, 0x93, 0x33, 0x12, 0x33, 0xf3, 0x74, 0xcb, 0x8b, 0x75, 0x93, 0xf3, 0xf3, 0xf2,
	0x52, 0x93, 0x4b, 0xf2, 0x8b, 0x74, 0x4b, 0x52, 0x73, 0x0b, 0x72, 0x12, 0x4b, 0x52, 0x75, 0xd3,
	0xf3, 0xf5, 0x53, 0x12, 0x4b, 0x12, 0xad, 0x41, 0x44, 0x12, 0x1b, 0xd8, 0xab, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x16, 0xe4, 0x49, 0xc5, 0x3a, 0x01, 0x00, 0x00,
}

func (this *BlockCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockCheckpoint)
	if !ok {
		that2, ok := that.(BlockCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LastRounds) != len(that1.LastRounds) {
		return false
	}
	for i := range this.LastRounds {
		if this.LastRounds[i] != that1.LastRounds[i] {
			return false
		}
	}
	return true
}
func (this *BlockCheckpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&data.BlockCheckpoint{")
	keysForLastRounds := make([]uint32, 0, len(this.LastRounds))
	for k, _ := range this.LastRounds {
		keysForLastRounds = append(keysForLastRounds, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForLastRounds)
	mapStringForLastRounds := "map[uint32]uint64{"
	for _, k := range keysForLastRounds {
		mapStringForLastRounds += fmt.Sprintf("%#v: %#v,", k, this.LastRounds[k])
	}
	mapStringForLastRounds += "}"
	if this.LastRounds != nil {
		s = append(s, "LastRounds: "+mapStringForLastRounds+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlockCheckpoint(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BlockCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastRounds) > 0 {
		for k := range m.LastRounds {
			v := m.LastRounds[k]
			baseI := i
			i = encodeVarintBlockCheckpoint(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBlockCheckpoint(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBlockCheckpoint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockCheckpoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockCheckpoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastRounds) > 0 {
		for k, v := range m.LastRounds {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBlockCheckpoint(uint64(k)) + 1 + sovBlockCheckpoint(uint64(v))
			n += mapEntrySize + 1 + sovBlockCheckpoint(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBlockCheckpoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockCheckpoint(x uint64) (n int) {
	return sovBlockCheckpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlockCheckpoint) String() string {
	if this == nil {
		return "nil"
	}
	keysForLastRounds := make([]uint32, 0, len(this.LastRounds))
	for k, _ := range this.LastRounds {
		keysForLastRounds = append(keysForLastRounds, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForLastRounds)
	mapStringForLastRounds := "map[uint32]uint64{"
	for _, k := range keysForLastRounds {
		mapStringForLastRounds += fmt.Sprintf("%v: %v,", k, this.LastRounds[k])
	}
	mapStringForLastRounds += "}"
	s := strings.Join([]string{`&BlockCheckpoint{`,
		`LastRounds:` + mapStringForLastRounds + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlockCheckpoint(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlockCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRounds == nil {
				m.LastRounds = make(map[uint32]uint64)
			}
			var mapkey uint32
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlockCheckpoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlockCheckpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlockCheckpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlockCheckpoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlockCheckpoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastRounds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCheckpoint
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockCheckpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockCheckpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockCheckpoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockCheckpoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockCheckpoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockCheckpoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockCheckpoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockCheckpoint = fmt.Errorf("proto: unexpected end of group")
)
