// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outport.proto

package data

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"
	"reflect"
	"strings"

	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/gogo/protobuf/proto"
	"github.com/multiversx/mx-chain-core-go/data/outport"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HyperOutportBlock struct {
	MetaOutportBlock            *outport.OutportBlock         `protobuf:"bytes,1,opt,name=MetaOutportBlock,proto3" json:"metaOutportBlock,omitempty"`
	NotarizedHeadersOutportData []*NotarizedHeaderOutportData `protobuf:"bytes,2,rep,name=NotarizedHeadersOutportData,proto3" json:"notarizedHeadersOutportData,omitempty"`
}

func (m *HyperOutportBlock) Reset()      { *m = HyperOutportBlock{} }
func (*HyperOutportBlock) ProtoMessage() {}
func (*HyperOutportBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3c7f6cbbb5ff4ad, []int{0}
}
func (m *HyperOutportBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HyperOutportBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HyperOutportBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyperOutportBlock.Merge(m, src)
}
func (m *HyperOutportBlock) XXX_Size() int {
	return m.Size()
}
func (m *HyperOutportBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_HyperOutportBlock.DiscardUnknown(m)
}

var xxx_messageInfo_HyperOutportBlock proto.InternalMessageInfo

func (m *HyperOutportBlock) GetMetaOutportBlock() *outport.OutportBlock {
	if m != nil {
		return m.MetaOutportBlock
	}
	return nil
}

func (m *HyperOutportBlock) GetNotarizedHeadersOutportData() []*NotarizedHeaderOutportData {
	if m != nil {
		return m.NotarizedHeadersOutportData
	}
	return nil
}

type NotarizedHeaderOutportData struct {
	NotarizedHeaderHash string                `protobuf:"bytes,1,opt,name=NotarizedHeaderHash,proto3" json:"notarizedHeaderHash,omitempty"`
	OutportBlock        *outport.OutportBlock `protobuf:"bytes,2,opt,name=OutportBlock,proto3" json:"outportBlock,omitempty"`
}

func (m *NotarizedHeaderOutportData) Reset()      { *m = NotarizedHeaderOutportData{} }
func (*NotarizedHeaderOutportData) ProtoMessage() {}
func (*NotarizedHeaderOutportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3c7f6cbbb5ff4ad, []int{1}
}
func (m *NotarizedHeaderOutportData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotarizedHeaderOutportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NotarizedHeaderOutportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotarizedHeaderOutportData.Merge(m, src)
}
func (m *NotarizedHeaderOutportData) XXX_Size() int {
	return m.Size()
}
func (m *NotarizedHeaderOutportData) XXX_DiscardUnknown() {
	xxx_messageInfo_NotarizedHeaderOutportData.DiscardUnknown(m)
}

var xxx_messageInfo_NotarizedHeaderOutportData proto.InternalMessageInfo

func (m *NotarizedHeaderOutportData) GetNotarizedHeaderHash() string {
	if m != nil {
		return m.NotarizedHeaderHash
	}
	return ""
}

func (m *NotarizedHeaderOutportData) GetOutportBlock() *outport.OutportBlock {
	if m != nil {
		return m.OutportBlock
	}
	return nil
}

type HyperOutportBlockRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HyperOutportBlockRequest) Reset()      { *m = HyperOutportBlockRequest{} }
func (*HyperOutportBlockRequest) ProtoMessage() {}
func (*HyperOutportBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3c7f6cbbb5ff4ad, []int{2}
}
func (m *HyperOutportBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HyperOutportBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HyperOutportBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyperOutportBlockRequest.Merge(m, src)
}
func (m *HyperOutportBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *HyperOutportBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HyperOutportBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HyperOutportBlockRequest proto.InternalMessageInfo

func (m *HyperOutportBlockRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*HyperOutportBlock)(nil), "proto.HyperOutportBlock")
	proto.RegisterType((*NotarizedHeaderOutportData)(nil), "proto.NotarizedHeaderOutportData")
	proto.RegisterType((*HyperOutportBlockRequest)(nil), "proto.HyperOutportBlockRequest")
}

func init() { proto.RegisterFile("outport.proto", fileDescriptor_b3c7f6cbbb5ff4ad) }

var fileDescriptor_b3c7f6cbbb5ff4ad = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x8b, 0xd3, 0x40,
	0x18, 0xcd, 0xd4, 0x1f, 0xe0, 0xac, 0x82, 0xce, 0x8a, 0x94, 0x88, 0x93, 0xdd, 0x82, 0xb0, 0x82,
	0x49, 0xa0, 0x1e, 0x3d, 0x19, 0x44, 0x7b, 0x51, 0xa1, 0xb9, 0x79, 0x91, 0x69, 0x3a, 0x26, 0xc1,
	0x26, 0x5f, 0x9c, 0x4c, 0xd6, 0x5d, 0xbd, 0x78, 0xf1, 0x2a, 0xfe, 0x19, 0xfe, 0x25, 0xe2, 0xb1,
	0xc7, 0x9e, 0x82, 0x9d, 0x5e, 0x24, 0xa7, 0xfd, 0x13, 0x64, 0xa7, 0x71, 0x49, 0x9b, 0x46, 0x2f,
	0x99, 0x1f, 0xdf, 0xfb, 0xde, 0x7b, 0xbc, 0x7c, 0x83, 0x6f, 0x40, 0x21, 0x33, 0x10, 0xd2, 0xc9,
	0x04, 0x48, 0x20, 0x57, 0xf4, 0x62, 0xda, 0x61, 0x2c, 0xa3, 0x62, 0xe2, 0x04, 0x90, 0xb8, 0x21,
	0x84, 0xe0, 0xea, 0xeb, 0x49, 0xf1, 0x56, 0x9f, 0xf4, 0x41, 0xef, 0xd6, 0x5d, 0xe6, 0xb3, 0x06,
	0x3c, 0x29, 0x66, 0x32, 0x3e, 0xe6, 0x22, 0x3f, 0x71, 0x93, 0x13, 0x3b, 0x88, 0x58, 0x9c, 0xda,
	0x01, 0x08, 0x6e, 0x87, 0xe0, 0x4e, 0x99, 0x64, 0x6e, 0x2d, 0xf8, 0x77, 0xf5, 0x66, 0x10, 0xbc,
	0x5b, 0xf3, 0x0c, 0xbe, 0xf4, 0xf0, 0xad, 0xd1, 0x69, 0xc6, 0xc5, 0xab, 0x46, 0x8d, 0xbc, 0xc1,
	0x37, 0x5f, 0x70, 0xc9, 0x9a, 0x77, 0x7d, 0x74, 0x80, 0x8e, 0xf6, 0x86, 0xfb, 0xeb, 0x3e, 0xa7,
	0x59, 0xf2, 0x68, 0x55, 0x5a, 0x66, 0xb2, 0xd5, 0xf0, 0x10, 0x92, 0x58, 0xf2, 0x24, 0x93, 0xa7,
	0xe3, 0x16, 0x19, 0xf9, 0x8a, 0xf0, 0xdd, 0x97, 0x20, 0x99, 0x88, 0x3f, 0xf2, 0xe9, 0x88, 0xb3,
	0x29, 0x17, 0x79, 0x0d, 0x78, 0xca, 0x24, 0xeb, 0xf7, 0x0e, 0x2e, 0x1d, 0xed, 0x0d, 0x0f, 0x6b,
	0xb1, 0x2d, 0x64, 0x03, 0xe8, 0x3d, 0xa8, 0x4a, 0xeb, 0x7e, 0xda, 0xcd, 0xd4, 0x70, 0xf1, 0x2f,
	0xc1, 0xc1, 0x0f, 0x84, 0xcd, 0x6e, 0x19, 0xe2, 0xe3, 0xfd, 0xad, 0xea, 0x88, 0xe5, 0x91, 0xce,
	0xe4, 0x9a, 0x77, 0x58, 0x95, 0xd6, 0xbd, 0xb4, 0x5d, 0x6e, 0x68, 0xef, 0xea, 0x26, 0x3e, 0xbe,
	0xbe, 0x91, 0x70, 0xaf, 0x3b, 0x61, 0xb3, 0x2a, 0xad, 0x3b, 0xb0, 0x3b, 0xdd, 0x0d, 0x92, 0x81,
	0x83, 0xfb, 0xad, 0xff, 0x39, 0xe6, 0xef, 0x0b, 0x9e, 0x4b, 0x42, 0xf0, 0xe5, 0xe8, 0xc2, 0xf6,
	0x58, 0xef, 0x87, 0xb0, 0x03, 0xef, 0x73, 0x71, 0x1c, 0x07, 0x9c, 0xf8, 0xf8, 0xf6, 0x73, 0x2e,
	0xdb, 0xe3, 0x61, 0xd5, 0x16, 0xbb, 0x84, 0xcc, 0x7e, 0x17, 0x60, 0x60, 0x78, 0x9f, 0xe6, 0x4b,
	0x6a, 0x2c, 0x96, 0xd4, 0x38, 0x5b, 0x52, 0xf4, 0x59, 0x51, 0xf4, 0x5d, 0x51, 0xf4, 0x53, 0x51,
	0x34, 0x57, 0x14, 0x2d, 0x14, 0x45, 0xbf, 0x14, 0x45, 0xbf, 0x15, 0x35, 0xce, 0x14, 0x45, 0xdf,
	0x56, 0xd4, 0x98, 0xaf, 0xa8, 0xb1, 0x58, 0x51, 0xe3, 0xf5, 0x93, 0xff, 0xcc, 0xfc, 0x87, 0xdc,
	0x0e, 0x20, 0x4d, 0x79, 0x20, 0x41, 0xd8, 0xe7, 0xe1, 0xcc, 0x98, 0xbc, 0x78, 0x04, 0x8f, 0xcf,
	0x3f, 0x93, 0xab, 0xda, 0xd7, 0xa3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x24, 0xbf, 0x34, 0x80,
	0x84, 0x03, 0x00, 0x00,
}

func (this *HyperOutportBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HyperOutportBlock)
	if !ok {
		that2, ok := that.(HyperOutportBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MetaOutportBlock.Equal(that1.MetaOutportBlock) {
		return false
	}
	if len(this.NotarizedHeadersOutportData) != len(that1.NotarizedHeadersOutportData) {
		return false
	}
	for i := range this.NotarizedHeadersOutportData {
		if !this.NotarizedHeadersOutportData[i].Equal(that1.NotarizedHeadersOutportData[i]) {
			return false
		}
	}
	return true
}
func (this *NotarizedHeaderOutportData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotarizedHeaderOutportData)
	if !ok {
		that2, ok := that.(NotarizedHeaderOutportData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotarizedHeaderHash != that1.NotarizedHeaderHash {
		return false
	}
	if !this.OutportBlock.Equal(that1.OutportBlock) {
		return false
	}
	return true
}
func (this *HyperOutportBlockRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HyperOutportBlockRequest)
	if !ok {
		that2, ok := that.(HyperOutportBlockRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	return true
}
func (this *HyperOutportBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data.HyperOutportBlock{")
	if this.MetaOutportBlock != nil {
		s = append(s, "MetaOutportBlock: "+fmt.Sprintf("%#v", this.MetaOutportBlock)+",\n")
	}
	if this.NotarizedHeadersOutportData != nil {
		s = append(s, "NotarizedHeadersOutportData: "+fmt.Sprintf("%#v", this.NotarizedHeadersOutportData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotarizedHeaderOutportData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data.NotarizedHeaderOutportData{")
	s = append(s, "NotarizedHeaderHash: "+fmt.Sprintf("%#v", this.NotarizedHeaderHash)+",\n")
	if this.OutportBlock != nil {
		s = append(s, "OutportBlock: "+fmt.Sprintf("%#v", this.OutportBlock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HyperOutportBlockRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&data.HyperOutportBlockRequest{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOutport(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HyperOutportBlockServiceClient is the client API for HyperOutportBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HyperOutportBlockServiceClient interface {
	GetHyperOutportBlock(ctx context.Context, in *HyperOutportBlockRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error)
}

type hyperOutportBlockServiceClient struct {
	cc *grpc.ClientConn
}

func NewHyperOutportBlockServiceClient(cc *grpc.ClientConn) HyperOutportBlockServiceClient {
	return &hyperOutportBlockServiceClient{cc}
}

func (c *hyperOutportBlockServiceClient) GetHyperOutportBlock(ctx context.Context, in *HyperOutportBlockRequest, opts ...grpc.CallOption) (*HyperOutportBlock, error) {
	out := new(HyperOutportBlock)
	err := c.cc.Invoke(ctx, "/proto.HyperOutportBlockService/GetHyperOutportBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperOutportBlockServiceServer is the service API for HyperOutportBlockService service.
type HyperOutportBlockServiceServer interface {
	GetHyperOutportBlock(context.Context, *HyperOutportBlockRequest) (*HyperOutportBlock, error)
}

// UnimplementedHyperOutportBlockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHyperOutportBlockServiceServer struct {
}

func (*UnimplementedHyperOutportBlockServiceServer) GetHyperOutportBlock(ctx context.Context, req *HyperOutportBlockRequest) (*HyperOutportBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperOutportBlock not implemented")
}

func RegisterHyperOutportBlockServiceServer(s *grpc.Server, srv HyperOutportBlockServiceServer) {
	s.RegisterService(&_HyperOutportBlockService_serviceDesc, srv)
}

func _HyperOutportBlockService_GetHyperOutportBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperOutportBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HyperOutportBlockService/GetHyperOutportBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperOutportBlockServiceServer).GetHyperOutportBlock(ctx, req.(*HyperOutportBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HyperOutportBlockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HyperOutportBlockService",
	HandlerType: (*HyperOutportBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHyperOutportBlock",
			Handler:    _HyperOutportBlockService_GetHyperOutportBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outport.proto",
}

func (m *HyperOutportBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyperOutportBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HyperOutportBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotarizedHeadersOutportData) > 0 {
		for iNdEx := len(m.NotarizedHeadersOutportData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotarizedHeadersOutportData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MetaOutportBlock != nil {
		{
			size, err := m.MetaOutportBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotarizedHeaderOutportData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotarizedHeaderOutportData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotarizedHeaderOutportData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutportBlock != nil {
		{
			size, err := m.OutportBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotarizedHeaderHash) > 0 {
		i -= len(m.NotarizedHeaderHash)
		copy(dAtA[i:], m.NotarizedHeaderHash)
		i = encodeVarintOutport(dAtA, i, uint64(len(m.NotarizedHeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HyperOutportBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyperOutportBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HyperOutportBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOutport(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutport(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HyperOutportBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaOutportBlock != nil {
		l = m.MetaOutportBlock.Size()
		n += 1 + l + sovOutport(uint64(l))
	}
	if len(m.NotarizedHeadersOutportData) > 0 {
		for _, e := range m.NotarizedHeadersOutportData {
			l = e.Size()
			n += 1 + l + sovOutport(uint64(l))
		}
	}
	return n
}

func (m *NotarizedHeaderOutportData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotarizedHeaderHash)
	if l > 0 {
		n += 1 + l + sovOutport(uint64(l))
	}
	if m.OutportBlock != nil {
		l = m.OutportBlock.Size()
		n += 1 + l + sovOutport(uint64(l))
	}
	return n
}

func (m *HyperOutportBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOutport(uint64(l))
	}
	return n
}

func sovOutport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutport(x uint64) (n int) {
	return sovOutport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HyperOutportBlock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotarizedHeadersOutportData := "[]*NotarizedHeaderOutportData{"
	for _, f := range this.NotarizedHeadersOutportData {
		repeatedStringForNotarizedHeadersOutportData += strings.Replace(f.String(), "NotarizedHeaderOutportData", "NotarizedHeaderOutportData", 1) + ","
	}
	repeatedStringForNotarizedHeadersOutportData += "}"
	s := strings.Join([]string{`&HyperOutportBlock{`,
		`MetaOutportBlock:` + strings.Replace(fmt.Sprintf("%v", this.MetaOutportBlock), "OutportBlock", "outport.OutportBlock", 1) + `,`,
		`NotarizedHeadersOutportData:` + repeatedStringForNotarizedHeadersOutportData + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotarizedHeaderOutportData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotarizedHeaderOutportData{`,
		`NotarizedHeaderHash:` + fmt.Sprintf("%v", this.NotarizedHeaderHash) + `,`,
		`OutportBlock:` + strings.Replace(fmt.Sprintf("%v", this.OutportBlock), "OutportBlock", "outport.OutportBlock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HyperOutportBlockRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HyperOutportBlockRequest{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOutport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HyperOutportBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyperOutportBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyperOutportBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaOutportBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaOutportBlock == nil {
				m.MetaOutportBlock = &outport.OutportBlock{}
			}
			if err := m.MetaOutportBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedHeadersOutportData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedHeadersOutportData = append(m.NotarizedHeadersOutportData, &NotarizedHeaderOutportData{})
			if err := m.NotarizedHeadersOutportData[len(m.NotarizedHeadersOutportData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotarizedHeaderOutportData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotarizedHeaderOutportData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotarizedHeaderOutportData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedHeaderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedHeaderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutportBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutportBlock == nil {
				m.OutportBlock = &outport.OutportBlock{}
			}
			if err := m.OutportBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HyperOutportBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyperOutportBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyperOutportBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutport = fmt.Errorf("proto: unexpected end of group")
)
